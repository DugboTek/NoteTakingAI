[{"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\index.js":"1","C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\reportWebVitals.js":"2","C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\App.js":"3","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\index.js":"4","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\App.js":"5","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\reportWebVitals.js":"6","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextWriter.js":"7","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\UploadFileBox.js":"8","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextAreaBox.js":"9","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\Drop-File-Input\\DropFileInput.jsx":"10","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\config\\imageConfig.js":"11","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\textWriteOut.js":"12","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\audioRecorder.js":"13"},{"size":552,"mtime":1678057236793,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1678057236795,"results":"16","hashOfConfig":"15"},{"size":1037,"mtime":1678057236792,"results":"17","hashOfConfig":"15"},{"size":552,"mtime":1678057236793,"results":"18","hashOfConfig":"19"},{"size":3408,"mtime":1678814181926,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1678057236795,"results":"21","hashOfConfig":"19"},{"size":960,"mtime":1678480761810,"results":"22","hashOfConfig":"19"},{"size":16301,"mtime":1679697733536,"results":"23","hashOfConfig":"19"},{"size":1579,"mtime":1678725065084,"results":"24","hashOfConfig":"19"},{"size":3156,"mtime":1678392724960,"results":"25","hashOfConfig":"19"},{"size":406,"mtime":1678725769561,"results":"26","hashOfConfig":"19"},{"size":465,"mtime":1678392724966,"results":"27","hashOfConfig":"19"},{"size":7083,"mtime":1679697886028,"results":"28","hashOfConfig":"19"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dr4x5g",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1le90mf",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"41"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\index.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\reportWebVitals.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\App.js",["73"],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\index.js",[],[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\App.js",["74","75","76","77","78","79","80","81","82","83","84"],[],"// create a react component that inputs a textarea message then performs a fetch request to localhost:3001 gets back a response a data.message and displys that message in a box below\r\n\r\nimport React, { useState } from 'react'\r\nimport './App.css'\r\nimport UploadFileBox from './components/UploadFileBox';\r\nimport TextAreaBox from './components/TextAreaBox';\r\nimport DropFileInput from './components/Drop-File-Input/DropFileInput';\r\nimport { MoonLoader } from 'react-spinners';\r\nimport ReactMarkdown from 'react-markdown'\r\n//import ion-icon\r\n\r\nfunction App(props) {\r\n  const [message, setMessage] = useState('')\r\n  const [response, setResponse] = useState('')\r\n\r\n  const [convertedText, setConvertedText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n  /*const handleSubmit = async (e) => {\r\n\r\n    e.preventDefault()\r\n    const response = await fetch('http://localhost:3001', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ message })\r\n    })\r\n    .then(res => res.json())\r\n    .then((data) => setResponse(data.message));\r\n    console.log(\"submitted\");\r\n  };*/\r\n\r\nconst [formData, setFormData] = useState(null);\r\n// write a handleFile function that takes in a file and sets the formData state to a new FormData object with the file appended to it\r\n\r\n\r\n\r\n\r\n\r\n\r\n /*const handleFile = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n     \r\n      const data = new FormData();\r\n      data.append(\"file\", file);\r\n      data.append(\"model\", \"whisper-1\");\r\n      data.append(\"language\", \"en\");\r\n      setFormData(data);\r\n\r\n      // check if the size is less than 25MB\r\n      if (file.size > 25 * 1024 * 1024) {\r\n        alert(\"Please upload an audio file less than 25MB\");\r\n        return;\r\n      }\r\n    }\r\n  };*/\r\n\r\nconst[textdata, setTextData] = useState(\"\");\r\n\r\n\r\nconst getData = (textdata) => {\r\n  console.log(textdata);\r\n  setTextData(textdata);\r\n};\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Scribb</h1>\r\n      \r\n      <div className=\"content-box\">\r\n        <div className=\"header-area\">\r\n          <div className =\"boxdefault\">\r\n            <div class = \"header-text-area\">\r\n              <div className=\"box-body\">\r\n\r\n                <div className =\"form-header-title\">\r\n                  <h4 className=\"toplogy\">\r\n                    <span class =\"primaryTextColor\">Need Notes? </span>\r\n                    Scribb\r\n                  </h4>\r\n                  <span className=\"toplolgy-mini\">\r\n                    Get Summerized Lectures With AI\r\n                  </span>\r\n                </div>\r\n                <div className =\"primary-action-btn gradient-animated-box\">\r\n                  <button type=\"button\" className=\"ant-btn\">\r\n                      <span>Upgrade</span>\r\n                  </button>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"left-rail-area flex\">\r\n           \r\n            <TextAreaBox text ={convertedText} loading ={loading}/>\r\n          \r\n        </div>\r\n        <div className=\"right-rail-area flex\">\r\n        <UploadFileBox onConvertedText ={setConvertedText} isLoading ={setLoading}/>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n      { \r\n     \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\reportWebVitals.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextWriter.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\UploadFileBox.js",["85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112"],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextAreaBox.js",["113","114","115","116","117"],[],"//import react\r\nimport React, { useState } from 'react';\r\nimport DropFileInput from './Drop-File-Input/DropFileInput';\r\nimport TextWriter from './TextWriter.js';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { ScaleLoader } from 'react-spinners';\r\n\r\nimport './text-area-box.css';\r\nimport TextWriteOut from './textWriteOut';\r\n\r\nconst fillerText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor, nisl eget ultricies lacinia, nisl nisl aliquet nisl, eget aliquet nis\";\r\n\r\nconst TextAreaBox = (props) => {\r\n\tconst{text} = props;\r\n\tconsole.log(\"TextArea\")\r\n\t//\r\n\tconsole.log(text);\r\n\treturn(\r\n\t\t<div className=\"flex flex-column flex-1\">\r\n\t\t\t<div className =\"boxdefault results-card\">\r\n\t\t\t\t<div className = \"box-body\">\r\n\t\t\t\t\t<div className=\"text-area\">\r\n\t\t\t\t\t\t<h1 className=\"text-area-title\">Your Notes</h1>\r\n\t\t\t\t\t\t<div className=\"loader\">\r\n\t\t\t\t\t\t</div>\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<div className = \"output-format\" id=\"outputDiv\">\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprops.loading ?\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<ScaleLoader\r\n\t\t\t\t\t\t\t\tsize={50}\r\n\t\t\t\t\t\t\t\tcolor={\"#cd5f44\"}\r\n\t\t\t\t\t\t\t\tloading={props.loading}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<ReactMarkdown \r\n\t\t\t\t\t\t\t\t\tsource={text}\r\n\t\t\t\t\t\t\t\t\tescapeHtml={false} // allows rendering of HTML tags\r\n\t\t\t\t\t\t\t\t\tskipHtml={false}   // allows rendering of HTML tags\r\n\t\t\t\t\t\t\t\t\tlinkTarget=\"_blank\" // opens links in a new tab\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\ttext\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</ReactMarkdown>\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\n//write random filler text\r\n\r\nexport default TextAreaBox;","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\Drop-File-Input\\DropFileInput.jsx",["118","119","120"],[],"import React, { useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './drop-file-input.css';\r\n\r\nimport { ImageConfig } from '../../config/imageConfig';\r\nimport uploadImg from '../../assets/images/upload.png';\r\n\r\nconst DropFileInput = (props) => {\r\n  const wrapperRef = useRef(null);\r\n  const [fileList, setFileList] = useState([]);\r\n  const [hasFile, setHasFile] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  const onDrageEnter = () => wrapperRef.current.classList.add('dragover');\r\n  const onDrageLeave = () => wrapperRef.current.classList.remove('dragover');\r\n  const onDrop = () => wrapperRef.current.classList.remove('dragover');\r\n\r\n  const handleFile = async (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n      const updatedList = [...fileList, file];\r\n      setFileList(updatedList);\r\n     // props.onFileChange(updatedList);\r\n      const data = new FormData();\r\n      data.append('file', file);\r\n      data.append('model', 'whisper-1');\r\n      setFormData(data);\r\n      console.log('File Uploaded- its me im handling the file');\r\n      props.setFormData(data);\r\n      //onFormDataChange(data);\r\n\r\n      setHasFile(true); // set the flag to true\r\n      if (file.size > 25 * 1024 * 1024) {\r\n        alert('Please upload an audio file less than 25MB');\r\n        console.log('Please upload an audio file less than 25MB');\r\n        setHasFile(false); // reset the flag if the file is too big\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const fileRemove = (index) => {\r\n    const updatedList = [...fileList];\r\n    updatedList.splice(index, 1);\r\n    setFileList(updatedList);\r\n    //props.onFileChange(updatedList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        ref={wrapperRef}\r\n        className='drop-file-input'\r\n        onDragEnter={onDrageEnter}\r\n        onDragLeave={onDrageLeave}\r\n        onDrop={onDrop}\r\n      >\r\n        <div className='drop-file-input__label'>\r\n          <img src={uploadImg} alt='upload' />\r\n          <p>Drag & Drop your file here.</p>\r\n        </div>\r\n        <input type='file' accept='audio/*' onChange={handleFile} />\r\n      </div>\r\n      {fileList.length > 0 ? (\r\n        <div className='drop-file-preview'>\r\n          <p className='drop-file-preview__title'>Uploaded</p>\r\n          {fileList.map((item, index) => (\r\n            <div className='drop-file-preview__item' key={index}>\r\n              <img\r\n                src={ImageConfig[item.type.split('/')[1] || ImageConfig['default']]}\r\n                alt='file'\r\n              />\r\n              <div className='drop-file-preview__item__info'>\r\n                <p>{item.name}</p>\r\n                <p>{Math.round(item.size/1024)} KB</p>\r\n              </div>\r\n              <span\r\n                className='drop-file-preview__item__del'\r\n                onClick={() => fileRemove(index)}\r\n              >\r\n                \r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\n/*DropFileInput.propTypes = {\r\n  onFileChange: PropTypes.func.isRequired,\r\n};*/\r\n\r\nexport default DropFileInput;\r\n","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\config\\imageConfig.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\textWriteOut.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\audioRecorder.js",["121","122","123","124","125","126","127","128"],[],"//API to handle audio recording \r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport UploadFileBox from \"./UploadFileBox\";\r\n\r\nimport blobToFile from \"./UploadFileBox\";\r\nimport sendAudioFile from \"./UploadFileBox\";\r\n\r\n\r\nvar audioRecorder = {\r\n    /** Stores the recorded audio as Blob objects of audio data as the recording continues*/\r\n    audioBlobs: [],/*of type Blob[]*/\r\n\r\n    oneMinuteBlobs: [],\r\n    /** Stores the reference of the MediaRecorder instance that handles the MediaStream when recording starts*/\r\n    mediaRecorder: null, /*of type MediaRecorder*/\r\n    /** Stores the reference to the stream currently capturing the audio*/\r\n    streamBeingCaptured: null, /*of type MediaStream*/\r\n\r\n    recordingDuration: 0,\r\n    /** Start recording the audio \r\n     * @returns {Promise} - returns a promise that resolves if audio recording successfully started\r\n     * \r\n     * \r\n     */\r\n\r\n\r\n    start: function () {\r\n        console.log(\"start\");\r\n        // Feature Detection\r\n        if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {\r\n            // Feature is not supported in browser\r\n            // return a custom error\r\n            return Promise.reject(new Error('mediaDevices API or getUserMedia method is not supported in this browser.'));\r\n        } else {\r\n            let startTime = null;\r\n            // Feature is supported in browser\r\n    \r\n            // create an audio stream\r\n            return navigator.mediaDevices.getUserMedia({ audio: true } /* of type MediaStreamConstraints */ )\r\n                // returns a promise that resolves to the audio stream\r\n                .then(stream /* of type MediaStream */ => {\r\n    \r\n                    // save the reference of the stream to be able to stop it when necessary\r\n                    audioRecorder.streamBeingCaptured = stream;\r\n    \r\n                    // create a media recorder instance by passing that stream into the MediaRecorder constructor\r\n                    audioRecorder.mediaRecorder = new MediaRecorder(stream); /* the MediaRecorder interface of the MediaStream Recording\r\n                    API provides functionality to easily record media */\r\n    \r\n                    // clear previously saved audio Blobs, if any\r\n                    audioRecorder.audioBlobs = [];\r\n    \r\n                   \r\n\r\n                    // add a dataavailable event listener in order to store the audio data Blobs when recording\r\n                    audioRecorder.mediaRecorder.addEventListener(\"dataavailable\", event => {\r\n                        // store audio Blob object\r\n                        audioRecorder.audioBlobs.push(event.data);\r\n\r\n                        audioRecorder.mediaRecorder.stop();\r\n                        audioRecorder.mediaRecorder.start();\r\n                       /* if (startTime === null) {\r\n                            startTime = Date.now();\r\n                            console.log(\"start time = now\");\r\n                        } else {\r\n                            audioRecorder.recordingDuration = (Date.now() - startTime) / 1000;\r\n                            console.log(\"duration:\");\r\n                            console.log(audioRecorder.recordingDuration);\r\n                        }\r\n                        if (audioRecorder.recordingDuration >= 60) {\r\n                            console.log(\"one minute reached\");\r\n                            audioRecorder.mediaRecorder.stop();\r\n                            let minuteBlob = new Blob(audioRecorder.audioBlobs, { 'type': 'audio/wav; codecs=0' });\r\n                            audioRecorder.oneMinuteBlobs.push(minuteBlob);\r\n                            audioRecorder.startRecorder();\r\n                            audioRecorder.audioBlobs = [];\r\n                            audioRecorder.recordingDuration = 0;\r\n                            startTime = null;\r\n                        }*/\r\n    \r\n                    });\r\n    \r\n                    // start the recording by calling the start method on the media recorder\r\n                    audioRecorder.mediaRecorder.start(60000);\r\n                });\r\n    \r\n            /* errors are not handled in the API because if its handled and the promise is chained, the .then after the catch will be executed*/\r\n        }\r\n    },\r\n\r\n    startRecorder: function () {\r\n        audioRecorder.mediaRecorder.start();\r\n      },\r\n    \r\n      // Extract the code to stop the recorder into a separate function\r\n      stopRecorder: function () {\r\n        audioRecorder.mediaRecorder.stop();\r\n      },\r\n\r\n\r\n    /** Stop the started audio recording\r\n     * @returns {Promise} - returns a promise that resolves to the audio as a blob file\r\n     */\r\n    stop: function () {\r\n        //return a promise that would return the blob or URL of the recording\r\n        return new Promise(resolve => {\r\n            //save audio type to pass to set the Blob type\r\n            let mimeType = audioRecorder.mediaRecorder.mimeType;\r\n\r\n            //listen to the stop event in order to create & return a single Blob object\r\n            audioRecorder.mediaRecorder.addEventListener(\"stop\", () => {\r\n                //create a single blob object, as we might have gathered a few Blob objects that needs to be joined as one\r\n             //  let audioBlob = new Blob(audioRecorder.audioBlobs, { 'type' : 'audio/wav; codecs=0' });\r\n               \r\n                //resolve promise with the single audio blob representing the recorded audio\r\n                resolve(audioRecorder.audioBlobs);\r\n            });\r\n            audioRecorder.cancel();\r\n        });\r\n    },\r\n    /** Cancel audio recording*/\r\n    cancel: function () {\r\n        //stop the recording feature\r\n        audioRecorder.mediaRecorder.stop();\r\n\r\n        //stop all the tracks on the active stream in order to stop the stream\r\n        audioRecorder.stopStream();\r\n\r\n        //reset API properties for next recording\r\n        audioRecorder.resetRecordingProperties();\r\n    },\r\n    /** Stop all the tracks on the active stream in order to stop the stream and remove\r\n     * the red flashing dot showing in the tab\r\n     */\r\n    stopStream: function () {\r\n        //stopping the capturing request by stopping all the tracks on the active stream\r\n        audioRecorder.streamBeingCaptured.getTracks() //get all tracks from the stream\r\n            .forEach(track /*of type MediaStreamTrack*/ => track.stop()); //stop each one\r\n    },\r\n    /** Reset all the recording properties including the media recorder and stream being captured*/\r\n    resetRecordingProperties: function () {\r\n        audioRecorder.mediaRecorder = null;\r\n        audioRecorder.streamBeingCaptured = null;\r\n\r\n        /*No need to remove event listeners attached to mediaRecorder as\r\n        If a DOM element which is removed is reference-free (no references pointing to it), the element itself is picked\r\n        up by the garbage collector as well as any event handlers/listeners associated with it.\r\n        getEventListeners(audioRecorder.mediaRecorder) will return an empty array of events.*/\r\n    }\r\n}\r\n\r\nexport{audioRecorder};",{"ruleId":"129","severity":1,"message":"130","line":12,"column":11,"nodeType":"131","messageId":"132","endLine":12,"endColumn":19},{"ruleId":"129","severity":1,"message":"133","line":7,"column":8,"nodeType":"131","messageId":"132","endLine":7,"endColumn":21},{"ruleId":"129","severity":1,"message":"134","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":20},{"ruleId":"129","severity":1,"message":"135","line":9,"column":8,"nodeType":"131","messageId":"132","endLine":9,"endColumn":21},{"ruleId":"129","severity":1,"message":"136","line":13,"column":10,"nodeType":"131","messageId":"132","endLine":13,"endColumn":17},{"ruleId":"129","severity":1,"message":"137","line":13,"column":19,"nodeType":"131","messageId":"132","endLine":13,"endColumn":29},{"ruleId":"129","severity":1,"message":"130","line":14,"column":10,"nodeType":"131","messageId":"132","endLine":14,"endColumn":18},{"ruleId":"129","severity":1,"message":"138","line":14,"column":20,"nodeType":"131","messageId":"132","endLine":14,"endColumn":31},{"ruleId":"129","severity":1,"message":"139","line":36,"column":8,"nodeType":"131","messageId":"132","endLine":36,"endColumn":16},{"ruleId":"129","severity":1,"message":"140","line":36,"column":18,"nodeType":"131","messageId":"132","endLine":36,"endColumn":29},{"ruleId":"129","severity":1,"message":"141","line":62,"column":7,"nodeType":"131","messageId":"132","endLine":62,"endColumn":15},{"ruleId":"129","severity":1,"message":"142","line":65,"column":7,"nodeType":"131","messageId":"132","endLine":65,"endColumn":14},{"ruleId":"129","severity":1,"message":"143","line":8,"column":8,"nodeType":"131","messageId":"132","endLine":8,"endColumn":21},{"ruleId":"129","severity":1,"message":"144","line":8,"column":23,"nodeType":"131","messageId":"132","endLine":8,"endColumn":32},{"ruleId":"129","severity":1,"message":"145","line":16,"column":9,"nodeType":"131","messageId":"132","endLine":16,"endColumn":22},{"ruleId":"129","severity":1,"message":"146","line":17,"column":9,"nodeType":"131","messageId":"132","endLine":17,"endColumn":16},{"ruleId":"129","severity":1,"message":"147","line":19,"column":9,"nodeType":"131","messageId":"132","endLine":19,"endColumn":16},{"ruleId":"129","severity":1,"message":"148","line":19,"column":18,"nodeType":"131","messageId":"132","endLine":19,"endColumn":28},{"ruleId":"129","severity":1,"message":"136","line":20,"column":9,"nodeType":"131","messageId":"132","endLine":20,"endColumn":16},{"ruleId":"129","severity":1,"message":"137","line":20,"column":18,"nodeType":"131","messageId":"132","endLine":20,"endColumn":28},{"ruleId":"129","severity":1,"message":"130","line":22,"column":9,"nodeType":"131","messageId":"132","endLine":22,"endColumn":17},{"ruleId":"129","severity":1,"message":"138","line":22,"column":19,"nodeType":"131","messageId":"132","endLine":22,"endColumn":30},{"ruleId":"129","severity":1,"message":"149","line":25,"column":15,"nodeType":"131","messageId":"132","endLine":25,"endColumn":22},{"ruleId":"129","severity":1,"message":"150","line":28,"column":9,"nodeType":"131","messageId":"132","endLine":28,"endColumn":20},{"ruleId":"129","severity":1,"message":"151","line":28,"column":22,"nodeType":"131","messageId":"132","endLine":28,"endColumn":36},{"ruleId":"129","severity":1,"message":"152","line":29,"column":19,"nodeType":"131","messageId":"132","endLine":29,"endColumn":30},{"ruleId":"129","severity":1,"message":"153","line":33,"column":6,"nodeType":"131","messageId":"132","endLine":33,"endColumn":25},{"ruleId":"129","severity":1,"message":"154","line":37,"column":8,"nodeType":"131","messageId":"132","endLine":37,"endColumn":15},{"ruleId":"129","severity":1,"message":"155","line":57,"column":8,"nodeType":"131","messageId":"132","endLine":57,"endColumn":19},{"ruleId":"156","severity":1,"message":"157","line":66,"column":7,"nodeType":"158","endLine":66,"endColumn":34,"suggestions":"159"},{"ruleId":"156","severity":1,"message":"160","line":84,"column":7,"nodeType":"158","endLine":84,"endColumn":19,"suggestions":"161"},{"ruleId":"129","severity":1,"message":"162","line":87,"column":8,"nodeType":"131","messageId":"132","endLine":87,"endColumn":22},{"ruleId":"129","severity":1,"message":"163","line":90,"column":9,"nodeType":"131","messageId":"132","endLine":90,"endColumn":17},{"ruleId":"129","severity":1,"message":"164","line":95,"column":11,"nodeType":"131","messageId":"132","endLine":95,"endColumn":23},{"ruleId":"129","severity":1,"message":"165","line":154,"column":8,"nodeType":"131","messageId":"132","endLine":154,"endColumn":19},{"ruleId":"129","severity":1,"message":"166","line":173,"column":10,"nodeType":"131","messageId":"132","endLine":173,"endColumn":21},{"ruleId":"129","severity":1,"message":"167","line":247,"column":8,"nodeType":"131","messageId":"132","endLine":247,"endColumn":22},{"ruleId":"168","severity":1,"message":"169","line":282,"column":17,"nodeType":"170","messageId":"171","endLine":282,"endColumn":19},{"ruleId":"129","severity":1,"message":"172","line":363,"column":9,"nodeType":"131","messageId":"132","endLine":363,"endColumn":13},{"ruleId":"129","severity":1,"message":"173","line":371,"column":9,"nodeType":"131","messageId":"132","endLine":371,"endColumn":17},{"ruleId":"129","severity":1,"message":"174","line":2,"column":17,"nodeType":"131","messageId":"132","endLine":2,"endColumn":25},{"ruleId":"129","severity":1,"message":"133","line":3,"column":8,"nodeType":"131","messageId":"132","endLine":3,"endColumn":21},{"ruleId":"129","severity":1,"message":"175","line":4,"column":8,"nodeType":"131","messageId":"132","endLine":4,"endColumn":18},{"ruleId":"129","severity":1,"message":"176","line":9,"column":8,"nodeType":"131","messageId":"132","endLine":9,"endColumn":20},{"ruleId":"129","severity":1,"message":"177","line":11,"column":7,"nodeType":"131","messageId":"132","endLine":11,"endColumn":17},{"ruleId":"129","severity":1,"message":"178","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":17},{"ruleId":"129","severity":1,"message":"147","line":12,"column":10,"nodeType":"131","messageId":"132","endLine":12,"endColumn":17},{"ruleId":"129","severity":1,"message":"139","line":13,"column":10,"nodeType":"131","messageId":"132","endLine":13,"endColumn":18},{"ruleId":"129","severity":1,"message":"179","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":13},{"ruleId":"129","severity":1,"message":"174","line":2,"column":17,"nodeType":"131","messageId":"132","endLine":2,"endColumn":25},{"ruleId":"129","severity":1,"message":"180","line":2,"column":27,"nodeType":"131","messageId":"132","endLine":2,"endColumn":36},{"ruleId":"129","severity":1,"message":"181","line":4,"column":8,"nodeType":"131","messageId":"132","endLine":4,"endColumn":21},{"ruleId":"129","severity":1,"message":"182","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":18},{"ruleId":"129","severity":1,"message":"183","line":7,"column":8,"nodeType":"131","messageId":"132","endLine":7,"endColumn":21},{"ruleId":"129","severity":1,"message":"184","line":36,"column":17,"nodeType":"131","messageId":"132","endLine":36,"endColumn":26},{"ruleId":"129","severity":1,"message":"185","line":109,"column":17,"nodeType":"131","messageId":"132","endLine":109,"endColumn":25},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'DropFileInput' is defined but never used.","'MoonLoader' is defined but never used.","'ReactMarkdown' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'textdata' is assigned a value but never used.","'getData' is assigned a value but never used.","'Configuration' is assigned a value but never used.","'OpenAIApi' is assigned a value but never used.","'convertedText' is assigned a value but never used.","'loading' is assigned a value but never used.","'hasFile' is assigned a value but never used.","'setHasFile' is assigned a value but never used.","'setFile' is assigned a value but never used.","'gptResponse' is assigned a value but never used.","'setGptResponse' is assigned a value but never used.","'setHeadings' is assigned a value but never used.","'recordingNotStopped' is defined but never used.","'api_key' is assigned a value but never used.","'getHeadings' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sendAudio'. Either include it or remove the dependency array.","ArrayExpression",["186"],"React Hook useEffect has a missing dependency: 'sendAudioFile'. Either include it or remove the dependency array.",["187"],"'splitAudioBlob' is assigned a value but never used.","'audioUrl' is assigned a value but never used.","'sourceBuffer' is assigned a value but never used.","'splitRecord' is assigned a value but never used.","'RecordAudio' is assigned a value but never used.","'handleFormData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'resp' is assigned a value but never used.","'respHead' is assigned a value but never used.","'useState' is defined but never used.","'TextWriter' is defined but never used.","'TextWriteOut' is defined but never used.","'fillerText' is assigned a value but never used.","'PropTypes' is defined but never used.","'React' is defined but never used.","'useEffect' is defined but never used.","'UploadFileBox' is defined but never used.","'blobToFile' is defined but never used.","'sendAudioFile' is defined but never used.","'startTime' is assigned a value but never used.","'mimeType' is assigned a value but never used.",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},"Update the dependencies array to be: [formData, formDataUpdated, sendAudio]",{"range":"192","text":"193"},"Update the dependencies array to be: [audioBlobs, sendAudioFile]",{"range":"194","text":"195"},[2216,2243],"[formData, formDataUpdated, sendAudio]",[2792,2804],"[audioBlobs, sendAudioFile]"]