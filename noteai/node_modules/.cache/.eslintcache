[{"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\index.js":"1","C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\reportWebVitals.js":"2","C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\App.js":"3","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\index.js":"4","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\App.js":"5","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\reportWebVitals.js":"6","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextWriter.js":"7","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\UploadFileBox.js":"8","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextAreaBox.js":"9","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\Drop-File-Input\\DropFileInput.jsx":"10","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\config\\imageConfig.js":"11","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\textWriteOut.js":"12","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\audioRecorder.js":"13"},{"size":552,"mtime":1678057236793,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1678057236795,"results":"16","hashOfConfig":"15"},{"size":1037,"mtime":1678057236792,"results":"17","hashOfConfig":"15"},{"size":557,"mtime":1680149397656,"results":"18","hashOfConfig":"19"},{"size":3408,"mtime":1678814181926,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1678057236795,"results":"21","hashOfConfig":"19"},{"size":960,"mtime":1678480761810,"results":"22","hashOfConfig":"19"},{"size":8110,"mtime":1679790124045,"results":"23","hashOfConfig":"19"},{"size":1579,"mtime":1678725065084,"results":"24","hashOfConfig":"19"},{"size":3156,"mtime":1678392724960,"results":"25","hashOfConfig":"19"},{"size":406,"mtime":1678725769561,"results":"26","hashOfConfig":"19"},{"size":465,"mtime":1678392724966,"results":"27","hashOfConfig":"19"},{"size":5165,"mtime":1679790124058,"results":"28","hashOfConfig":"19"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dr4x5g",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1le90mf",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"45"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"45"},"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\index.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\reportWebVitals.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\App.js",["74"],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\index.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\App.js",["75","76","77","78","79","80","81","82","83","84","85"],[],"// create a react component that inputs a textarea message then performs a fetch request to localhost:3001 gets back a response a data.message and displys that message in a box below\r\n\r\nimport React, { useState } from 'react'\r\nimport './App.css'\r\nimport UploadFileBox from './components/UploadFileBox';\r\nimport TextAreaBox from './components/TextAreaBox';\r\nimport DropFileInput from './components/Drop-File-Input/DropFileInput';\r\nimport { MoonLoader } from 'react-spinners';\r\nimport ReactMarkdown from 'react-markdown'\r\n//import ion-icon\r\n\r\nfunction App(props) {\r\n  const [message, setMessage] = useState('')\r\n  const [response, setResponse] = useState('')\r\n\r\n  const [convertedText, setConvertedText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n  /*const handleSubmit = async (e) => {\r\n\r\n    e.preventDefault()\r\n    const response = await fetch('http://localhost:3001', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ message })\r\n    })\r\n    .then(res => res.json())\r\n    .then((data) => setResponse(data.message));\r\n    console.log(\"submitted\");\r\n  };*/\r\n\r\nconst [formData, setFormData] = useState(null);\r\n// write a handleFile function that takes in a file and sets the formData state to a new FormData object with the file appended to it\r\n\r\n\r\n\r\n\r\n\r\n\r\n /*const handleFile = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n     \r\n      const data = new FormData();\r\n      data.append(\"file\", file);\r\n      data.append(\"model\", \"whisper-1\");\r\n      data.append(\"language\", \"en\");\r\n      setFormData(data);\r\n\r\n      // check if the size is less than 25MB\r\n      if (file.size > 25 * 1024 * 1024) {\r\n        alert(\"Please upload an audio file less than 25MB\");\r\n        return;\r\n      }\r\n    }\r\n  };*/\r\n\r\nconst[textdata, setTextData] = useState(\"\");\r\n\r\n\r\nconst getData = (textdata) => {\r\n  console.log(textdata);\r\n  setTextData(textdata);\r\n};\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Scribb</h1>\r\n      \r\n      <div className=\"content-box\">\r\n        <div className=\"header-area\">\r\n          <div className =\"boxdefault\">\r\n            <div class = \"header-text-area\">\r\n              <div className=\"box-body\">\r\n\r\n                <div className =\"form-header-title\">\r\n                  <h4 className=\"toplogy\">\r\n                    <span class =\"primaryTextColor\">Need Notes? </span>\r\n                    Scribb\r\n                  </h4>\r\n                  <span className=\"toplolgy-mini\">\r\n                    Get Summerized Lectures With AI\r\n                  </span>\r\n                </div>\r\n                <div className =\"primary-action-btn gradient-animated-box\">\r\n                  <button type=\"button\" className=\"ant-btn\">\r\n                      <span>Upgrade</span>\r\n                  </button>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"left-rail-area flex\">\r\n           \r\n            <TextAreaBox text ={convertedText} loading ={loading}/>\r\n          \r\n        </div>\r\n        <div className=\"right-rail-area flex\">\r\n        <UploadFileBox onConvertedText ={setConvertedText} isLoading ={setLoading}/>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n      { \r\n     \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App",[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\reportWebVitals.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextWriter.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\UploadFileBox.js",["86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"],[],"//import react\r\nimport React, { useState } from 'react';\r\nimport DropFileInput from './Drop-File-Input/DropFileInput';\r\nimport { audioRecorder } from './audioRecorder.js';\r\nimport recordIcon from '../assets/images/record-black.png';\r\n\r\nconst OpenAI = require('openai');\r\nconst {Configuration, OpenAIApi} = OpenAI;\r\n\r\n\r\n\r\nconst \tkey = process.env.React_App_OPEN_AI_API_KEY;\r\nconsole.log(key);\r\n\r\nconst UploadFileBox = (props) => {\r\n\t\r\n\tconst [convertedText, setConvertedText] = useState(\"\");\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [formData, setFormData] = useState(null);\r\n\tconst [hasFile, setHasFile] = useState(false);\r\n\tconst [message, setMessage] = useState('');\r\n\tconst [recording, setRecording] = useState(false);\r\n\tconst [response, setResponse] = useState('');\r\n\tconst [userSubject, setUserSubject] = useState(\"\");\r\n\tconst [file, setFile] = useState(null);\r\n\tvar recordingNotStopped; // User pressed record button and keep talking, still not stop button pressed\r\n\tconst trackLengthInMS = 1000; // Length of audio chunk in miliseconds\r\n\tconst maxNumOfSecs = 1000; // Number of mili seconds we support per recording (1 second)\r\n\r\n\tconst api_key = process.env.OPEN_AI_API_KEY;\r\n\r\n\t//write \r\n\r\n\tconst blobToFile = (theBlob, fileName) => {\r\n\t\tconst b = theBlob;\r\n\t\t// Add properties to the blob\r\n\t\tb.lastModifiedDate = new Date();\r\n\t\tb.name = fileName;\r\n\t\tconst fileObj = new File([theBlob], fileName, { type: theBlob.type });\r\n\t\treturn fileObj;\r\n\t}\r\n\r\n\tconst sleep = time => new Promise(resolve => setTimeout(resolve, time));\r\n\r\n\tconst asyncFn = async() => {\r\n\t\tfor (let i = 0; i < maxNumOfSecs; i++) {\r\n\t\t  if (recordingNotStopped) {\r\n\t\t\ttoggleAudioRecording(true);\r\n\t\t\tawait sleep(trackLengthInMS);\r\n\t\t\ttoggleAudioRecording(false);\r\n\t\t  }\r\n\t\t}\r\n\t  }\r\n\r\n\tconst toggleAudioRecording = () => {\t\r\n\r\n\t\tif (recording == false) {\r\n\t\t\tsetRecording(true);\r\n\t\t  //start recording using the audio recording API\r\n\t\t  audioRecorder.start()\r\n\t\t  .then(() => { //on success\r\n\t\t\t  console.log(\"Recording Audio...\")    \r\n\t\t  })    \r\n\t\t  .catch(error => { //on error\r\n            //No Browser Support Error\r\n            if (error.message.includes(\"mediaDevices API or getUserMedia method is not supported in this browser.\")) {\r\n                console.log(\"To record audio, use browsers like Chrome and Firefox.\");\r\n            }\r\n            //Error handling structure\r\n            switch (error.name) {\r\n                case 'AbortError': //error from navigator.mediaDevices.getUserMedia\r\n                    console.log(\"An AbortError has occured.\");\r\n                    break;\r\n                case 'NotAllowedError': //error from navigator.mediaDevices.getUserMedia\r\n                    console.log(\"A NotAllowedError has occured. User might have denied permission.\");\r\n                    break;\r\n                case 'NotFoundError': //error from navigator.mediaDevices.getUserMedia\r\n                    console.log(\"A NotFoundError has occured.\");\r\n                    break;\r\n                case 'NotReadableError': //error from navigator.mediaDevices.getUserMedia\r\n                    console.log(\"A NotReadableError has occured.\");\r\n                    break;\r\n                case 'SecurityError': //error from navigator.mediaDevices.getUserMedia or from the MediaRecorder.start\r\n                    console.log(\"A SecurityError has occured.\");\r\n                    break;\r\n                case 'TypeError': //error from navigator.mediaDevices.getUserMedia\r\n                    console.log(\"A TypeError has occured.\");\r\n                    break;\r\n                case 'InvalidStateError': //error from the MediaRecorder.start\r\n                    console.log(\"An InvalidStateError has occured.\");\r\n                    break;\r\n                case 'UnknownError': //error from the MediaRecorder.start\r\n                    console.log(\"An UnknownError has occured.\");\r\n                    break;\r\n                default:\r\n                    console.log(\"An error occured with the error name \" + error.name);\r\n            };\r\n        });\r\n\t} \r\n\telse {\r\n\t\tconsole.log(\"stop recording\");\r\n\t\tsetRecording(false);\r\n\t\t //stop the recording using the audio recording API\r\n\t\t audioRecorder.stop()\r\n\t\t .then(audioAsblob => {\r\n\t\t\tvar file = blobToFile(audioAsblob, \"audio.wav\");\r\n\t\t\tconst data = new FormData();\r\n\t\t\tdata.append('file', file);\r\n\t\t\tdata.append('model', 'whisper-1');\r\n\t\t\tsetFormData(data);\r\n\t\t\tconsole.log(\"formData\"+formData);\r\n\t\t\t //Play recorder audio\r\n\t\t\t// playAudio(audioAsblob);\r\n \r\n\t\t\t //hide recording control button & return record icon\r\n\t\t\t// handleHidingRecordingControlButtons();\r\n\t\t })\r\n\t\t .catch(error => {\r\n\t\t\t //Error handling structure\r\n\t\t\t switch (error.name) {\r\n\t\t\t\t case 'InvalidStateError': //error from the MediaRecorder.stop\r\n\t\t\t\t\t console.log(\"An InvalidStateError has occured.\");\r\n\t\t\t\t\t break;\r\n\t\t\t\t default:\r\n\t\t\t\t\t console.log(\"An error occured with the error name \" + error.name);\r\n\t\t\t };\r\n\t\t });\r\n\t}\r\n\t}\r\n\t\r\n\r\n\t\r\n\tconst handleSubmit = async (inputText) => {\r\n\t\t//gets the subject from the user\r\n\t\tconst resp = await fetch('http://localhost:3001/noteDetails', {\r\n\t\t\tmethod : 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({userSubject}),\r\n\t\t});\r\n\r\n\t\tconst response = await fetch('http://localhost:3001', {\r\n\t\t  method: 'POST',\r\n\t\t  headers: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t  },\r\n\t\t  body: JSON.stringify({inputText}),\r\n\t\t})\r\n\t\tconst data = await response.json();\r\n\t\tsetResponse(data.message);\r\n\t\tsetConvertedText(data.message);\r\n\t//\tprops.setConvertedText(data.message);\r\n\t\tprops.onConvertedText(data.message);\r\n\t\tsetLoading(false);\r\n\t\tprops.isLoading(false);\r\n\t\tconsole.log(data.message);\r\n\t\t/*.then(res => res.json())\r\n\t\t.then((data) => setResponse(data.message))\r\n\t\t.then((data) => setConvertedText(data.message))\r\n\t\t.then((data) => props.onConvertedText(data.message));*/\r\n\t\tconsole.log(\"submitted\");\r\n\r\n\t  };\r\n\r\n\t  \r\n\t/*const handleFile = async(e) =>{\r\n  \r\n\t\tif (e.target.files && e.target.files[0]) \r\n\t\t{\r\n\t\t  const file = e.target.files[0];\r\n\t\t  const data = new FormData();~\r\n\t\t  data.append(\"file\", file);\r\n\t\t  data.append(\"model\", \"whisper-1\");\r\n\t\t  setFormData(data);\r\n\t\t  console.log(\"File Uploaded\");\r\n\t\t  console.log(data);\r\n\t\t  setHasFile(true); // set the flag to true\r\n\t\t  if (file.size > 25 * 1024 * 1024) \r\n\t\t  {\r\n\t\t\talert(\"Please upload an audio file less than 25MB\");\r\n\t\t\tconsole.log(\"Please upload an audio file less than 25MB\");\r\n\t  \r\n\t\t\tsetHasFile(false); // reset the flag if the file is too big\r\n\t\t\treturn;\r\n\t\t  }\r\n\t\t}\r\n\t}*/\r\n\r\n\t\r\n\r\n\tconst sendAudio = async () => {\r\n\t\tconsole.log(formData);\r\n\t\tprops.isLoading(true);\r\n\t\tsetLoading(true);\r\n\t\tconst res = await fetch(\"https://api.openai.com/v1/audio/transcriptions\", {\r\n\t\t  headers: {\r\n\t\t\t\"Authorization\": `Bearer ${key}`\r\n\t\t  },\r\n\t\t  method: \"POST\",\r\n\t\t  body: formData,\r\n\t\t});\r\n\t\tconsole.log(\"audio sent\");\r\n\t\tconst data = await res.json();\r\n\t\tconsole.log(data);\r\n\t\t//setConvertedText(data.text);\r\n\t\t//props.onConvertedText(data.text);\r\n\t\t//setUserSubject(\"Computer Networks\");\r\n\t\tconsole.log(\"userSubject in send audio\");\r\n\t\tconsole.log(userSubject);\r\n\t\thandleSubmit(data.text);\r\n\t  };\r\n\r\n\treturn(\r\n\t\t<div className=\"box--upload\">\r\n\t\t\t<div className =\"microphone-box\">\r\n\t\t\t\t<button className=\"record-button\" onClick={toggleAudioRecording}>\r\n\t\t\t\t<img src={recordIcon} className=\"record-icon\" alt= \"recording button\"/>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<h2 className=\"header\">\r\n\t\t\t\tGet Summerized Lectures With AI\r\n\t\t\t</h2>\r\n\r\n\t\t\t{\r\n\t\t\t<DropFileInput setFormData={setFormData}/>\r\n\t\t\t\t//setFormData={setFormData}\r\n\t\t\t\t//onFileChange={handleFile}\r\n\r\n\r\n\t\t\t}\r\n\t\t\t<form> \r\n\t\t\t\t<div class = \"input-container\">\r\n\t\t\t\t\t<input type=\"text\" onChange ={(e) => setUserSubject(e.target.value)} id=\"subject\" name=\"subject\" placeholder=\"Enter The Class Subject\" required class = \"text-input\"/>\r\n\t\t\t\t\t<label for=\"subject\" class = \"label\">Subject</label>\r\n\t\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<button type = \"button\" className =\"ant-btn padded marginTop\" onClick={sendAudio}>Generate Notes</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default UploadFileBox;","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextAreaBox.js",["101","102","103","104","105"],[],"//import react\r\nimport React, { useState } from 'react';\r\nimport DropFileInput from './Drop-File-Input/DropFileInput';\r\nimport TextWriter from './TextWriter.js';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { ScaleLoader } from 'react-spinners';\r\n\r\nimport './text-area-box.css';\r\nimport TextWriteOut from './textWriteOut';\r\n\r\nconst fillerText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor, nisl eget ultricies lacinia, nisl nisl aliquet nisl, eget aliquet nis\";\r\n\r\nconst TextAreaBox = (props) => {\r\n\tconst{text} = props;\r\n\tconsole.log(\"TextArea\")\r\n\t//\r\n\tconsole.log(text);\r\n\treturn(\r\n\t\t<div className=\"flex flex-column flex-1\">\r\n\t\t\t<div className =\"boxdefault results-card\">\r\n\t\t\t\t<div className = \"box-body\">\r\n\t\t\t\t\t<div className=\"text-area\">\r\n\t\t\t\t\t\t<h1 className=\"text-area-title\">Your Notes</h1>\r\n\t\t\t\t\t\t<div className=\"loader\">\r\n\t\t\t\t\t\t</div>\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<div className = \"output-format\" id=\"outputDiv\">\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprops.loading ?\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<ScaleLoader\r\n\t\t\t\t\t\t\t\tsize={50}\r\n\t\t\t\t\t\t\t\tcolor={\"#cd5f44\"}\r\n\t\t\t\t\t\t\t\tloading={props.loading}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<ReactMarkdown \r\n\t\t\t\t\t\t\t\t\tsource={text}\r\n\t\t\t\t\t\t\t\t\tescapeHtml={false} // allows rendering of HTML tags\r\n\t\t\t\t\t\t\t\t\tskipHtml={false}   // allows rendering of HTML tags\r\n\t\t\t\t\t\t\t\t\tlinkTarget=\"_blank\" // opens links in a new tab\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\ttext\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</ReactMarkdown>\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\n//write random filler text\r\n\r\nexport default TextAreaBox;","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\Drop-File-Input\\DropFileInput.jsx",["106","107","108"],[],"import React, { useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './drop-file-input.css';\r\n\r\nimport { ImageConfig } from '../../config/imageConfig';\r\nimport uploadImg from '../../assets/images/upload.png';\r\n\r\nconst DropFileInput = (props) => {\r\n  const wrapperRef = useRef(null);\r\n  const [fileList, setFileList] = useState([]);\r\n  const [hasFile, setHasFile] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  const onDrageEnter = () => wrapperRef.current.classList.add('dragover');\r\n  const onDrageLeave = () => wrapperRef.current.classList.remove('dragover');\r\n  const onDrop = () => wrapperRef.current.classList.remove('dragover');\r\n\r\n  const handleFile = async (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n      const updatedList = [...fileList, file];\r\n      setFileList(updatedList);\r\n     // props.onFileChange(updatedList);\r\n      const data = new FormData();\r\n      data.append('file', file);\r\n      data.append('model', 'whisper-1');\r\n      setFormData(data);\r\n      console.log('File Uploaded- its me im handling the file');\r\n      props.setFormData(data);\r\n      //onFormDataChange(data);\r\n\r\n      setHasFile(true); // set the flag to true\r\n      if (file.size > 25 * 1024 * 1024) {\r\n        alert('Please upload an audio file less than 25MB');\r\n        console.log('Please upload an audio file less than 25MB');\r\n        setHasFile(false); // reset the flag if the file is too big\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const fileRemove = (index) => {\r\n    const updatedList = [...fileList];\r\n    updatedList.splice(index, 1);\r\n    setFileList(updatedList);\r\n    //props.onFileChange(updatedList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        ref={wrapperRef}\r\n        className='drop-file-input'\r\n        onDragEnter={onDrageEnter}\r\n        onDragLeave={onDrageLeave}\r\n        onDrop={onDrop}\r\n      >\r\n        <div className='drop-file-input__label'>\r\n          <img src={uploadImg} alt='upload' />\r\n          <p>Drag & Drop your file here.</p>\r\n        </div>\r\n        <input type='file' accept='audio/*' onChange={handleFile} />\r\n      </div>\r\n      {fileList.length > 0 ? (\r\n        <div className='drop-file-preview'>\r\n          <p className='drop-file-preview__title'>Uploaded</p>\r\n          {fileList.map((item, index) => (\r\n            <div className='drop-file-preview__item' key={index}>\r\n              <img\r\n                src={ImageConfig[item.type.split('/')[1] || ImageConfig['default']]}\r\n                alt='file'\r\n              />\r\n              <div className='drop-file-preview__item__info'>\r\n                <p>{item.name}</p>\r\n                <p>{Math.round(item.size/1024)} KB</p>\r\n              </div>\r\n              <span\r\n                className='drop-file-preview__item__del'\r\n                onClick={() => fileRemove(index)}\r\n              >\r\n                \r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\n/*DropFileInput.propTypes = {\r\n  onFileChange: PropTypes.func.isRequired,\r\n};*/\r\n\r\nexport default DropFileInput;\r\n","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\config\\imageConfig.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\textWriteOut.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\audioRecorder.js",["109"],[],"//API to handle audio recording \r\n\r\nvar audioRecorder = {\r\n    /** Stores the recorded audio as Blob objects of audio data as the recording continues*/\r\n    audioBlobs: [],/*of type Blob[]*/\r\n    /** Stores the reference of the MediaRecorder instance that handles the MediaStream when recording starts*/\r\n    mediaRecorder: null, /*of type MediaRecorder*/\r\n    /** Stores the reference to the stream currently capturing the audio*/\r\n    streamBeingCaptured: null, /*of type MediaStream*/\r\n    /** Start recording the audio \r\n     * @returns {Promise} - returns a promise that resolves if audio recording successfully started\r\n     */\r\n    \r\n    start: function () {\r\n        //Feature Detection\r\n        if (!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia)) {\r\n            //Feature is not supported in browser\r\n            //return a custom error\r\n            return Promise.reject(new Error('mediaDevices API or getUserMedia method is not supported in this browser.'));\r\n        }\r\n\r\n        else {\r\n            //Feature is supported in browser\r\n\r\n            //create an audio stream\r\n            return navigator.mediaDevices.getUserMedia({ audio: true }/*of type MediaStreamConstraints*/)\r\n                //returns a promise that resolves to the audio stream\r\n                .then(stream /*of type MediaStream*/ => {\r\n\r\n                    //save the reference of the stream to be able to stop it when necessary\r\n                    audioRecorder.streamBeingCaptured = stream;\r\n\r\n                    //create a media recorder instance by passing that stream into the MediaRecorder constructor\r\n                    audioRecorder.mediaRecorder = new MediaRecorder(stream); /*the MediaRecorder interface of the MediaStream Recording\r\n                    API provides functionality to easily record media*/\r\n\r\n                    //clear previously saved audio Blobs, if any\r\n                    audioRecorder.audioBlobs = [];\r\n\r\n                    //add a dataavailable event listener in order to store the audio data Blobs when recording\r\n                    audioRecorder.mediaRecorder.addEventListener(\"dataavailable\", event => {\r\n                        //store audio Blob object\r\n                        audioRecorder.audioBlobs.push(event.data);\r\n                    });\r\n\r\n                    //start the recording by calling the start method on the media recorder\r\n                    audioRecorder.mediaRecorder.start();\r\n                });\r\n\r\n            /* errors are not handled in the API because if its handled and the promise is chained, the .then after the catch will be executed*/\r\n        }\r\n    },\r\n    /** Stop the started audio recording\r\n     * @returns {Promise} - returns a promise that resolves to the audio as a blob file\r\n     */\r\n    stop: function () {\r\n        //return a promise that would return the blob or URL of the recording\r\n        return new Promise(resolve => {\r\n            //save audio type to pass to set the Blob type\r\n            let mimeType = audioRecorder.mediaRecorder.mimeType;\r\n\r\n            //listen to the stop event in order to create & return a single Blob object\r\n            audioRecorder.mediaRecorder.addEventListener(\"stop\", () => {\r\n                //create a single blob object, as we might have gathered a few Blob objects that needs to be joined as one\r\n               let audioBlob = new Blob(audioRecorder.audioBlobs, { 'type' : 'audio/wav; codecs=0' });\r\n                \r\n                //resolve promise with the single audio blob representing the recorded audio\r\n                resolve(audioBlob);\r\n            });\r\n            audioRecorder.cancel();\r\n        });\r\n    },\r\n    /** Cancel audio recording*/\r\n    cancel: function () {\r\n        //stop the recording feature\r\n        audioRecorder.mediaRecorder.stop();\r\n\r\n        //stop all the tracks on the active stream in order to stop the stream\r\n        audioRecorder.stopStream();\r\n\r\n        //reset API properties for next recording\r\n        audioRecorder.resetRecordingProperties();\r\n    },\r\n    /** Stop all the tracks on the active stream in order to stop the stream and remove\r\n     * the red flashing dot showing in the tab\r\n     */\r\n    stopStream: function () {\r\n        //stopping the capturing request by stopping all the tracks on the active stream\r\n        audioRecorder.streamBeingCaptured.getTracks() //get all tracks from the stream\r\n            .forEach(track /*of type MediaStreamTrack*/ => track.stop()); //stop each one\r\n    },\r\n    /** Reset all the recording properties including the media recorder and stream being captured*/\r\n    resetRecordingProperties: function () {\r\n        audioRecorder.mediaRecorder = null;\r\n        audioRecorder.streamBeingCaptured = null;\r\n\r\n        /*No need to remove event listeners attached to mediaRecorder as\r\n        If a DOM element which is removed is reference-free (no references pointing to it), the element itself is picked\r\n        up by the garbage collector as well as any event handlers/listeners associated with it.\r\n        getEventListeners(audioRecorder.mediaRecorder) will return an empty array of events.*/\r\n    }\r\n}\r\n\r\nexport{audioRecorder};",{"ruleId":"110","severity":1,"message":"111","line":12,"column":11,"nodeType":"112","messageId":"113","endLine":12,"endColumn":19},{"ruleId":"110","severity":1,"message":"114","line":7,"column":8,"nodeType":"112","messageId":"113","endLine":7,"endColumn":21},{"ruleId":"110","severity":1,"message":"115","line":8,"column":10,"nodeType":"112","messageId":"113","endLine":8,"endColumn":20},{"ruleId":"110","severity":1,"message":"116","line":9,"column":8,"nodeType":"112","messageId":"113","endLine":9,"endColumn":21},{"ruleId":"110","severity":1,"message":"117","line":13,"column":10,"nodeType":"112","messageId":"113","endLine":13,"endColumn":17},{"ruleId":"110","severity":1,"message":"118","line":13,"column":19,"nodeType":"112","messageId":"113","endLine":13,"endColumn":29},{"ruleId":"110","severity":1,"message":"111","line":14,"column":10,"nodeType":"112","messageId":"113","endLine":14,"endColumn":18},{"ruleId":"110","severity":1,"message":"119","line":14,"column":20,"nodeType":"112","messageId":"113","endLine":14,"endColumn":31},{"ruleId":"110","severity":1,"message":"120","line":36,"column":8,"nodeType":"112","messageId":"113","endLine":36,"endColumn":16},{"ruleId":"110","severity":1,"message":"121","line":36,"column":18,"nodeType":"112","messageId":"113","endLine":36,"endColumn":29},{"ruleId":"110","severity":1,"message":"122","line":62,"column":7,"nodeType":"112","messageId":"113","endLine":62,"endColumn":15},{"ruleId":"110","severity":1,"message":"123","line":65,"column":7,"nodeType":"112","messageId":"113","endLine":65,"endColumn":14},{"ruleId":"110","severity":1,"message":"124","line":8,"column":8,"nodeType":"112","messageId":"113","endLine":8,"endColumn":21},{"ruleId":"110","severity":1,"message":"125","line":8,"column":23,"nodeType":"112","messageId":"113","endLine":8,"endColumn":32},{"ruleId":"110","severity":1,"message":"126","line":17,"column":9,"nodeType":"112","messageId":"113","endLine":17,"endColumn":22},{"ruleId":"110","severity":1,"message":"127","line":18,"column":9,"nodeType":"112","messageId":"113","endLine":18,"endColumn":16},{"ruleId":"110","severity":1,"message":"128","line":20,"column":9,"nodeType":"112","messageId":"113","endLine":20,"endColumn":16},{"ruleId":"110","severity":1,"message":"129","line":20,"column":18,"nodeType":"112","messageId":"113","endLine":20,"endColumn":28},{"ruleId":"110","severity":1,"message":"117","line":21,"column":9,"nodeType":"112","messageId":"113","endLine":21,"endColumn":16},{"ruleId":"110","severity":1,"message":"118","line":21,"column":18,"nodeType":"112","messageId":"113","endLine":21,"endColumn":28},{"ruleId":"110","severity":1,"message":"111","line":23,"column":9,"nodeType":"112","messageId":"113","endLine":23,"endColumn":17},{"ruleId":"110","severity":1,"message":"130","line":25,"column":9,"nodeType":"112","messageId":"113","endLine":25,"endColumn":13},{"ruleId":"110","severity":1,"message":"131","line":25,"column":15,"nodeType":"112","messageId":"113","endLine":25,"endColumn":22},{"ruleId":"110","severity":1,"message":"132","line":30,"column":8,"nodeType":"112","messageId":"113","endLine":30,"endColumn":15},{"ruleId":"110","severity":1,"message":"133","line":45,"column":8,"nodeType":"112","messageId":"113","endLine":45,"endColumn":15},{"ruleId":"134","severity":1,"message":"135","line":57,"column":17,"nodeType":"136","messageId":"137","endLine":57,"endColumn":19},{"ruleId":"110","severity":1,"message":"138","line":135,"column":9,"nodeType":"112","messageId":"113","endLine":135,"endColumn":13},{"ruleId":"110","severity":1,"message":"139","line":2,"column":17,"nodeType":"112","messageId":"113","endLine":2,"endColumn":25},{"ruleId":"110","severity":1,"message":"114","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":21},{"ruleId":"110","severity":1,"message":"140","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":18},{"ruleId":"110","severity":1,"message":"141","line":9,"column":8,"nodeType":"112","messageId":"113","endLine":9,"endColumn":20},{"ruleId":"110","severity":1,"message":"142","line":11,"column":7,"nodeType":"112","messageId":"113","endLine":11,"endColumn":17},{"ruleId":"110","severity":1,"message":"143","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":17},{"ruleId":"110","severity":1,"message":"128","line":12,"column":10,"nodeType":"112","messageId":"113","endLine":12,"endColumn":17},{"ruleId":"110","severity":1,"message":"120","line":13,"column":10,"nodeType":"112","messageId":"113","endLine":13,"endColumn":18},{"ruleId":"110","severity":1,"message":"144","line":60,"column":17,"nodeType":"112","messageId":"113","endLine":60,"endColumn":25},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'DropFileInput' is defined but never used.","'MoonLoader' is defined but never used.","'ReactMarkdown' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'textdata' is assigned a value but never used.","'getData' is assigned a value but never used.","'Configuration' is assigned a value but never used.","'OpenAIApi' is assigned a value but never used.","'convertedText' is assigned a value but never used.","'loading' is assigned a value but never used.","'hasFile' is assigned a value but never used.","'setHasFile' is assigned a value but never used.","'file' is assigned a value but never used.","'setFile' is assigned a value but never used.","'api_key' is assigned a value but never used.","'asyncFn' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'resp' is assigned a value but never used.","'useState' is defined but never used.","'TextWriter' is defined but never used.","'TextWriteOut' is defined but never used.","'fillerText' is assigned a value but never used.","'PropTypes' is defined but never used.","'mimeType' is assigned a value but never used."]