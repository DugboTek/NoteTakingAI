[{"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\index.js":"1","C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\reportWebVitals.js":"2","C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\App.js":"3","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\index.js":"4","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\App.js":"5","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\reportWebVitals.js":"6","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextWriter.js":"7","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\UploadFileBox.js":"8","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextAreaBox.js":"9","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\Drop-File-Input\\DropFileInput.jsx":"10","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\config\\imageConfig.js":"11","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\textWriteOut.js":"12"},{"size":552,"mtime":1678057236793,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1678057236795,"results":"15","hashOfConfig":"14"},{"size":1037,"mtime":1678057236792,"results":"16","hashOfConfig":"14"},{"size":552,"mtime":1681152991762,"results":"17","hashOfConfig":"18"},{"size":3493,"mtime":1681152991627,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1678057236795,"results":"20","hashOfConfig":"18"},{"size":960,"mtime":1681149153224,"results":"21","hashOfConfig":"18"},{"size":9199,"mtime":1681153068516,"results":"22","hashOfConfig":"18"},{"size":1551,"mtime":1681152991713,"results":"23","hashOfConfig":"18"},{"size":3172,"mtime":1681152991661,"results":"24","hashOfConfig":"18"},{"size":406,"mtime":1678725769561,"results":"25","hashOfConfig":"18"},{"size":465,"mtime":1681149153244,"results":"26","hashOfConfig":"18"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dr4x5g",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1le90mf",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\index.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\reportWebVitals.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\App.js",["68"],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\index.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\App.js",["69","70","71","72","73","74","75","76","77","78","79"],[],"// create a react component that inputs a textarea message then performs a fetch request to localhost:3001 gets back a response a data.message and displys that message in a box below\r\n\r\nimport React, { useState } from 'react'\r\nimport './App.css'\r\nimport UploadFileBox from './components/UploadFileBox';\r\nimport TextAreaBox from './components/TextAreaBox';\r\nimport DropFileInput from './components/Drop-File-Input/DropFileInput';\r\nimport { MoonLoader } from 'react-spinners';\r\nimport ReactMarkdown from 'react-markdown'\r\n//import ion-icon\r\n\r\nfunction App(props) {\r\n  const [message, setMessage] = useState('')\r\n  const [response, setResponse] = useState('')\r\n\r\n  const [convertedText, setConvertedText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n  /*const handleSubmit = async (e) => {\r\n\r\n    e.preventDefault()\r\n    const response = await fetch('http://localhost:3001', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ message })\r\n    })\r\n    .then(res => res.json())\r\n    .then((data) => setResponse(data.message));\r\n    console.log(\"submitted\");\r\n  };*/\r\n\r\nconst [formData, setFormData] = useState(null);\r\n// write a handleFile function that takes in a file and sets the formData state to a new FormData object with the file appended to it\r\n\r\n\r\n\r\n\r\n\r\n\r\n /*const handleFile = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n     \r\n      const data = new FormData();\r\n      data.append(\"file\", file);\r\n      data.append(\"model\", \"whisper-1\");\r\n      data.append(\"language\", \"en\");\r\n      setFormData(data);\r\n\r\n      // check if the size is less than 25MB\r\n      if (file.size > 25 * 1024 * 1024) {\r\n        alert(\"Please upload an audio file less than 25MB\");\r\n        return;\r\n      }\r\n    }\r\n  };*/\r\n\r\nconst[textdata, setTextData] = useState(\"\");\r\n\r\n\r\nconst getData = (textdata) => {\r\n  console.log(textdata);\r\n  setTextData(textdata);\r\n};\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"app-header\">\r\n      <h1>Scribb<span class=\"subscript\">ALPHA</span></h1>\r\n      </div>\r\n      <div className=\"content-box\">\r\n        <div className=\"header-area\">\r\n          <div className =\"boxdefault-padded\">\r\n            <div class = \"header-text-area\">\r\n              <div className=\"box-body\">\r\n\r\n                <div className =\"form-header-title\">\r\n                  <h4 className=\"toplogy\">\r\n                    <span class =\"primaryTextColor\">Need Notes? </span>\r\n                    Scribb\r\n                  </h4>\r\n                  <span className=\"toplolgy-mini\">\r\n                    Get Summerized Lectures With AI\r\n                  </span>\r\n                </div>\r\n                <div className =\"primary-action-btn gradient-animated-box\">\r\n                  <button type=\"button\" className=\"ant-btn\">\r\n                      <span>Upgrade</span>\r\n                  </button>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"left-rail-area flex\">\r\n           \r\n            <TextAreaBox text ={convertedText} loading ={loading}/>\r\n          \r\n        </div>\r\n        <div className=\"right-rail-area flex\">\r\n        <UploadFileBox onConvertedText ={setConvertedText} isLoading ={setLoading}/>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n      { \r\n     \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextWriter.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\UploadFileBox.js",["80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108"],[],"import React, { useState, useEffect, useRef} from 'react';\r\nimport DropFileInput from './Drop-File-Input/DropFileInput';\r\nimport recordIcon from '../assets/images/record-black.png';\r\nimport { WebVoiceProcessor } from '@picovoice/web-voice-processor';\r\nimport lamejs from 'lamejstmp';\r\n\r\nconst OpenAI = require('openai');\r\nconst { Configuration, OpenAIApi } = OpenAI;\r\n\r\nconst key = process.env.React_App_OPEN_AI_API_KEY;\r\n\r\nconst UploadFileBox = (props) => {\r\n  const [convertedText, setConvertedText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n  const [hasFile, setHasFile] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [recording, setRecording] = useState(false);\r\n  const [response, setResponse] = useState('');\r\n  const [old, setOld] = useState([]);\r\n  const [userSubject, setUserSubject] = useState(\"\");\r\n  const [file, setFile] = useState(null);\r\n\r\n  const [elapsedRecordingTime, setElapsedRecordingTime] = useState(0);\r\n\r\n  const [autoResumeRecording, setAutoResumeRecording] = useState(false);\r\n\r\n  const recordedChunksRef = useRef([]);\r\n  const recordedChunksRefOld = useRef([]);\r\n\r\n\r\n\r\n  const trackLengthInMS = (512 / 16000) * 1000; // Length of audio chunk in miliseconds\r\n  const maxNumOfSecs = 1000; // Number of mili seconds we support per recording (1 second)\r\n\r\n  const api_key = process.env.OPEN_AI_API_KEY;\r\n  const TIMEOUT_MS = 1000 * 60 * 5; // 5 minutes\r\n\r\n  const blobToFile = (theBlob, fileName) => {\r\n    const b = theBlob;\r\n    // Add properties to the blob\r\n    b.lastModifiedDate = new Date();\r\n    b.name = fileName;\r\n    const fileObj = new File([theBlob], fileName, { type: theBlob.type });\r\n    return fileObj;\r\n  }\r\n\r\n  const sleep = time => new Promise(resolve => setTimeout(resolve, time));\r\n\r\n  const maxFileSize = 1 * 1024 * 1024; // 25 MB\r\nlet mp3Encoder;\r\n\r\n// useEffect(() => {\r\n// \tlet timer;\r\n  \r\n// \tif (recording) {\r\n// \t  timer = setTimeout(async () => {\r\n// \t\tsetAutoResumeRecording(true);\r\n// \t\tawait toggleAudioRecording(); // Toggle off\r\n// \t\tsetTimeout(toggleAudioRecording, TIMEOUT_MS); // Schedule toggling on after 5 minutes\r\n// \t  }, TIMEOUT_MS); // Schedule toggling off after 5 minutes\r\n// \t}\r\n  \r\n// \treturn () => {\r\n// \t  if (timer) clearTimeout(timer);\r\n// \t};\r\n//   }, [recording]);\r\n\r\n// useEffect(()  => {\r\n// \tif (elapsedRecordingTime >= TIMEOUT_MS) {\r\n// \t\tsetElapsedRecordingTime(0);\r\n// \t\trestartAudio(); \r\n// \t  }\r\n//   }, [elapsedRecordingTime]);\r\n\r\nconst intervalRef = useRef(null);\r\n\r\nuseEffect(() => {\r\n  if (recording) {\r\n\tif (intervalRef.current) clearInterval(intervalRef.current);\r\n\r\n\tintervalRef.current = setInterval(async () => {\r\n\t  setAutoResumeRecording(true);\r\n\t  await restartAudio(); // Restart the recording\r\n\t}, TIMEOUT_MS); // Schedule restarting every 1 minute\r\n  } else {\r\n\tif (intervalRef.current) clearInterval(intervalRef.current);\r\n  }\r\n\r\n  return () => {\r\n\tif (intervalRef.current) clearInterval(intervalRef.current);\r\n  };\r\n}, [recording]);\r\n\r\n\r\n\r\n  const restartAudio = async () => {\r\n\tconsole.log(\"Timeout reached. Stopping recording.\");\r\n\t// Stop the recording\r\n\tawait WebVoiceProcessor.unsubscribe(audioProcessor);\r\n\trecordedChunksRefOld.current = recordedChunksRef.current;\r\n\trecordedChunksRef.current = [];\r\n\t // Reset elapsedRecordingTime\r\n\t // Start a new recording session\r\n\t if (recording) {\r\n\t   console.log(\"restarting recording...\");\r\n\t   mp3Encoder = new lamejs.Mp3Encoder(1, 16000, 128);\r\n  \r\n\t   // Create a new WebVoiceProcessor instance\r\n\t   const webVoiceProcessor = new WebVoiceProcessor({\r\n\t\t context: \"browsers\",\r\n\t\t frameLength: 512,\r\n\t\t sampleRate: 16000,\r\n\t   });\r\n   \r\n\t   // Start recording using the Web Voice Processor\r\n\t   try {\r\n\t\t console.log(\"Recording Audio...\");\r\n\t\t await WebVoiceProcessor.subscribe(audioProcessor);\r\n\t   } catch (error) {\r\n\t\t console.error(\"An error occurred while starting the recorder: \", error);\r\n\t\t setRecording(false);\r\n\t   }\r\n\t }\r\n\t// Send the audio and reset recordedChunks\r\n\tawait sendAudio();\r\n  }\r\n\r\n  \r\n\r\nconst processAudioData = async (inputFrame) => {\r\n\t// If audio processing is disabled, return early\r\n  \r\n\tconst mp3Data = mp3Encoder.encodeBuffer(inputFrame);\r\n\tif (mp3Data.length > 0) {\r\n\t  recordedChunksRef.current = [...recordedChunksRef.current, mp3Data];\r\n\t}\r\n\tlet filesize = recordedChunksRef.current.length * Uint8Array.BYTES_PER_ELEMENT;\r\n  \r\n\t// Update elapsedRecordingTime\r\n\tsetElapsedRecordingTime(prevTime => prevTime + trackLengthInMS);\r\n\t\r\n  };\r\n  \r\n  \r\n  \r\n\r\nconst audioProcessor = {\r\n    onmessage: (e) => {\r\n      processAudioData(e.data.inputFrame);\r\n    },\r\n  };\r\n\r\n  const toggleAudioRecording = async () => {\r\n\tif (recording) {\r\n\t  // Stop the recording and get the recorded audio Blob as an MP3 file\r\n\t  try {\r\n\t\tconsole.log('unsubscribing...');\r\n\t\tconsole.log(recordedChunksRef);\r\n\t\tawait WebVoiceProcessor.unsubscribe(audioProcessor);\r\n\t\tawait WebVoiceProcessor.reset();\r\n\t\trecordedChunksRefOld.current = recordedChunksRef.current;\r\n\t\tsendAudio().finally(() => {\r\n\t\t  setRecording(false);\r\n\t\t  console.log('stopping recording...');\r\n\t\t  recordedChunksRef.current = [];\r\n\t\t});\r\n\t  } catch (error) {\r\n\t\tconsole.error(\"An error occurred while stopping the recorder: \", error);\r\n\t  }\r\n\t} else {\r\n\t  setRecording(true);\r\n  \r\n\t  // Initialize the MP3 encoder\r\n\t  mp3Encoder = new lamejs.Mp3Encoder(1, 16000, 128);\r\n  \r\n\t  // Create a new WebVoiceProcessor instance\r\n\t  const webVoiceProcessor = new WebVoiceProcessor({\r\n\t\tcontext: \"browsers\",\r\n\t\tframeLength: 512,\r\n\t\tsampleRate: 16000,\r\n\t  });\r\n  \r\n\t  // Start recording using the Web Voice Processor\r\n\t  try {\r\n\t\tconsole.log(\"Recording Audio...\");\r\n\t\tawait WebVoiceProcessor.subscribe(audioProcessor);\r\n\t  } catch (error) {\r\n\t\tconsole.error(\"An error occurred while starting the recorder: \", error);\r\n\t\tsetRecording(false);\r\n\t  }\r\n\t}\r\n  };\r\n  \r\n  const handleSubmit = async (inputText) => {\r\n\t//gets the subject from the user\r\n\tconst resp = await fetch('https://scribb.ai:3001/noteDetails', {\r\n\t  method: 'POST',\r\n\t  headers: {\r\n\t\t'Content-Type': 'application/json'\r\n\t  },\r\n\t  body: JSON.stringify({ userSubject }),\r\n\t});\r\n  \r\n\tconst response = await fetch('https://scribb.ai:3001', {\r\n\t  method: 'POST',\r\n\t  headers: {\r\n\t\t'Content-Type': 'application/json'\r\n\t  },\r\n\t  body: JSON.stringify({ inputText }),\r\n\t});\r\n\tconst data = await response.json();\r\n\tconst newMessage = data.message;\r\n  \r\n\tsetOld((prevMessages) => {\r\n\t  const allMessages = [...prevMessages, newMessage].join(\"\\n\");\r\n\t  props.onConvertedText(allMessages);\r\n\t  return [...prevMessages, newMessage];\r\n\t});\r\n  \r\n\tsetLoading(false);\r\n\tprops.isLoading(false);\r\n\tconsole.log(data.message);\r\n\tconsole.log(\"submitted\");\r\n  };\r\n  \r\n\r\n\t\r\n\t\r\n\r\n\t  const sendAudio = async () => {\r\n\t\t\r\n\t\ttry {\r\n\t\t  props.isLoading(true);\r\n\t\t  setLoading(true);\r\n\t\t  // Stop recording and get the recorded audio Blob as an MP3 file\r\n\t\t  const audioBlob = new Blob(recordedChunksRefOld.current, { type: \"audio/mpeg\" });\r\n\t\t  let file = new File([audioBlob], \"audio.mpeg\");\r\n\t\t  // Create a FormData instance to send the file and model information\r\n\t\t  let data = new FormData();\r\n\t\t  data.append(\"file\", file);\r\n\t\t  data.append(\"model\", \"whisper-1\");\r\n\t\t  // Send the audio file to the API for transcription\r\n\t\t  let res = await fetch(\"https://api.openai.com/v1/audio/transcriptions\", {\r\n\t\t\theaders: {\r\n\t\t\t  Authorization: `Bearer ${key}`,\r\n\t\t\t},\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: data,\r\n\t\t  });\r\n\t\t  let responseJson = await res.json();\r\n\t\t  console.log(responseJson);\r\n\t\t  // Handle the form submit with the converted text\r\n\t\t  handleSubmit(responseJson.text);\r\n\t\t} catch (error) {\r\n\t\t  console.error(error);\r\n\t\t} finally {\r\n\t\t  // Reset the recordedChunks array\r\n\t\t  recordedChunksRefOld.current = [];\r\n\t\t}\r\n\t  };\r\n\t  \r\n\t  \r\n\t\r\n\r\n\treturn(\r\n\t\t<div className=\"box--upload\">\r\n\t\t\t<div className=\"micContainer\">\r\n\t\t\t<div className = \"micdotContainer\">\r\n\t\t\t<div className =\"microphone-box\">\r\n\t\t\t\t<button className={`record-button${recording ? '-recording' : ''}`} onClick={toggleAudioRecording}>\r\n\t\t\t\t<img src={recordIcon} className=\"record-icon\" alt= \"recording button\"/>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div className={`indicator${recording ? '-recording' : ''}`}></div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"instructions\">\r\n\t\t\t\t<b>Press the button</b>\r\n\t\t\t\t<br/>\r\n\t\t\t\tto start note taking with Scribb\r\n\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t\t<div class=\"tab-container\">\r\n\t\t\t\t\t<div class=\"tab\">\r\n\t\t\t\t\t\t<span>Record</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"tab-upload\">\r\n\t\t\t\t\t\t<span>Upload</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t{\r\n\t\t\t// <DropFileInput setFormData={setFormData}/>\r\n\t\t\t// \t//setFormData={setFormData}\r\n\t\t\t// \t//onFileChange={handleFile}\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\t<form> \r\n\t\t\t\t<div class = \"input-container\">\r\n\t\t\t\t\t<div class=\"tab-subject\">\r\n\t\t\t\t\t\t<span>Subject</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<input type=\"text\" onChange ={(e) => setUserSubject(e.target.value)} id=\"subject\" name=\"subject\" placeholder=\"Enter class subject\" required class = \"text-input\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\r\n\t\t\t{/* <button type = \"button\" className =\"ant-btn padded marginTop\" onClick={sendAudio}>Generate Notes</button> */}\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default UploadFileBox;","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextAreaBox.js",["109","110","111","112","113","114","115"],[],"//import react\r\nimport React, { useState } from 'react';\r\nimport DropFileInput from './Drop-File-Input/DropFileInput';\r\nimport TextWriter from './TextWriter.js';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { ScaleLoader } from 'react-spinners';\r\n\r\nimport './text-area-box.css';\r\nimport TextWriteOut from './textWriteOut';\r\n\r\nconst fillerText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor, nisl eget ultricies lacinia, nisl nisl aliquet nisl, eget aliquet nis\";\r\nconst initialText = 'test'\r\n\t//const [textVals, setTextVals] = useState('');\r\nconst TextAreaBox = (props) => {\r\n\tconst { text, loading } = props;\r\n  \r\n\treturn (\r\n\t  <div className=\"flex flex-column flex-1\">\r\n\t\t<div className=\"boxdefault results-card\">\r\n\t\t  <div className=\"box-body\">\r\n\t\t\t<div className=\"text-area\">\r\n\t\t\t  <div className=\"text-area-title\">Your Notes</div>\r\n\t\t\t  <div className=\"output-format\" id=\"outputDiv\">\r\n\t\t\t\t<ReactMarkdown\r\n\t\t\t\t  source={text}\r\n\t\t\t\t  escapeHtml={false}\r\n\t\t\t\t  skipHtml={false}\r\n\t\t\t\t  linkTarget=\"_blank\"\r\n\t\t\t\t>\r\n\t\t\t\t  {text}\r\n\t\t\t\t</ReactMarkdown>\r\n  \r\n\t\t\t\t{loading && (\r\n\t\t\t\t  <div class=\"book\">\r\n\t\t\t\t\t<div class=\"book__pg-shadow\"></div>\r\n\t\t\t\t\t<div class=\"book__pg\"></div>\r\n\t\t\t\t\t<div class=\"book__pg book__pg--2\"></div>\r\n\t\t\t\t\t<div class=\"book__pg book__pg--3\"></div>\r\n\t\t\t\t\t<div class=\"book__pg book__pg--4\"></div>\r\n\t\t\t\t\t<div class=\"book__pg book__pg--5\"></div>\r\n\t\t\t  \t</div>\r\n\t\t\t\t)}\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t  </div>\r\n\t);\r\n  };\r\n  \r\n\r\n//write random filler text\r\n\r\nexport default TextAreaBox;","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\Drop-File-Input\\DropFileInput.jsx",["116","117","118","119"],[],"import React, { useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './drop-file-input.css';\r\n\r\nimport { ImageConfig } from '../../config/imageConfig';\r\nimport uploadImg from '../../assets/images/upload.png';\r\n\r\nconst DropFileInput = (props) => {\r\n  const wrapperRef = useRef(null);\r\n  const [fileList, setFileList] = useState([]);\r\n  const [hasFile, setHasFile] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  const onDrageEnter = () => wrapperRef.current.classList.add('dragover');\r\n  const onDrageLeave = () => wrapperRef.current.classList.remove('dragover');\r\n  const onDrop = () => wrapperRef.current.classList.remove('dragover');\r\n\r\n  const handleFile = async (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n      const updatedList = [...fileList, file];\r\n      setFileList(updatedList);\r\n     // props.onFileChange(updatedList);\r\n      const data = new FormData();\r\n      data.append('file', file);\r\n      data.append('model', 'whisper-1');\r\n      setFormData(data);\r\n      console.log('File Uploaded- its me im handling the file');\r\n      props.setFormData(data);\r\n      //onFormDataChange(data);\r\n\r\n      setHasFile(true); // set the flag to true\r\n      if (file.size > 25 * 1024 * 1024) {\r\n        alert('Please upload an audio file less than 25MB');\r\n        console.log('Please upload an audio file less than 25MB');\r\n        setHasFile(false); // reset the flag if the file is too big\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const fileRemove = (index) => {\r\n    const updatedList = [...fileList];\r\n    updatedList.splice(index, 1);\r\n    setFileList(updatedList);\r\n    //props.onFileChange(updatedList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        ref={wrapperRef}\r\n        className='drop-file-input'\r\n        onDragEnter={onDrageEnter}\r\n        onDragLeave={onDrageLeave}\r\n        onDrop={onDrop}\r\n      >\r\n        <div className='drop-file-input__label'>\r\n          {/* <img src={uploadImg} alt='upload' /> */}\r\n          {/* <p>Drag & Drop your file here.</p> */}\r\n        </div>\r\n        <input type='file' accept='audio/*' onChange={handleFile} />\r\n      </div>\r\n      {fileList.length > 0 ? (\r\n        <div className='drop-file-preview'>\r\n          <p className='drop-file-preview__title'>Uploaded</p>\r\n          {fileList.map((item, index) => (\r\n            <div className='drop-file-preview__item' key={index}>\r\n              <img\r\n                src={ImageConfig[item.type.split('/')[1] || ImageConfig['default']]}\r\n                alt='file'\r\n              />\r\n              <div className='drop-file-preview__item__info'>\r\n                <p>{item.name}</p>\r\n                <p>{Math.round(item.size/1024)} KB</p>\r\n              </div>\r\n              <span\r\n                className='drop-file-preview__item__del'\r\n                onClick={() => fileRemove(index)}\r\n              >\r\n                \r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\n/*DropFileInput.propTypes = {\r\n  onFileChange: PropTypes.func.isRequired,\r\n};*/\r\n\r\nexport default DropFileInput;\r\n","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\config\\imageConfig.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\textWriteOut.js",[],[],{"ruleId":"120","severity":1,"message":"121","line":12,"column":11,"nodeType":"122","messageId":"123","endLine":12,"endColumn":19},{"ruleId":"120","severity":1,"message":"124","line":7,"column":8,"nodeType":"122","messageId":"123","endLine":7,"endColumn":21},{"ruleId":"120","severity":1,"message":"125","line":8,"column":10,"nodeType":"122","messageId":"123","endLine":8,"endColumn":20},{"ruleId":"120","severity":1,"message":"126","line":9,"column":8,"nodeType":"122","messageId":"123","endLine":9,"endColumn":21},{"ruleId":"120","severity":1,"message":"127","line":13,"column":10,"nodeType":"122","messageId":"123","endLine":13,"endColumn":17},{"ruleId":"120","severity":1,"message":"128","line":13,"column":19,"nodeType":"122","messageId":"123","endLine":13,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":14,"column":10,"nodeType":"122","messageId":"123","endLine":14,"endColumn":18},{"ruleId":"120","severity":1,"message":"129","line":14,"column":20,"nodeType":"122","messageId":"123","endLine":14,"endColumn":31},{"ruleId":"120","severity":1,"message":"130","line":36,"column":8,"nodeType":"122","messageId":"123","endLine":36,"endColumn":16},{"ruleId":"120","severity":1,"message":"131","line":36,"column":18,"nodeType":"122","messageId":"123","endLine":36,"endColumn":29},{"ruleId":"120","severity":1,"message":"132","line":62,"column":7,"nodeType":"122","messageId":"123","endLine":62,"endColumn":15},{"ruleId":"120","severity":1,"message":"133","line":65,"column":7,"nodeType":"122","messageId":"123","endLine":65,"endColumn":14},{"ruleId":"120","severity":1,"message":"124","line":2,"column":8,"nodeType":"122","messageId":"123","endLine":2,"endColumn":21},{"ruleId":"120","severity":1,"message":"134","line":8,"column":9,"nodeType":"122","messageId":"123","endLine":8,"endColumn":22},{"ruleId":"120","severity":1,"message":"135","line":8,"column":24,"nodeType":"122","messageId":"123","endLine":8,"endColumn":33},{"ruleId":"120","severity":1,"message":"136","line":13,"column":10,"nodeType":"122","messageId":"123","endLine":13,"endColumn":23},{"ruleId":"120","severity":1,"message":"137","line":13,"column":25,"nodeType":"122","messageId":"123","endLine":13,"endColumn":41},{"ruleId":"120","severity":1,"message":"138","line":14,"column":10,"nodeType":"122","messageId":"123","endLine":14,"endColumn":17},{"ruleId":"120","severity":1,"message":"130","line":15,"column":10,"nodeType":"122","messageId":"123","endLine":15,"endColumn":18},{"ruleId":"120","severity":1,"message":"131","line":15,"column":20,"nodeType":"122","messageId":"123","endLine":15,"endColumn":31},{"ruleId":"120","severity":1,"message":"139","line":16,"column":10,"nodeType":"122","messageId":"123","endLine":16,"endColumn":17},{"ruleId":"120","severity":1,"message":"140","line":16,"column":19,"nodeType":"122","messageId":"123","endLine":16,"endColumn":29},{"ruleId":"120","severity":1,"message":"127","line":17,"column":10,"nodeType":"122","messageId":"123","endLine":17,"endColumn":17},{"ruleId":"120","severity":1,"message":"128","line":17,"column":19,"nodeType":"122","messageId":"123","endLine":17,"endColumn":29},{"ruleId":"120","severity":1,"message":"121","line":19,"column":10,"nodeType":"122","messageId":"123","endLine":19,"endColumn":18},{"ruleId":"120","severity":1,"message":"129","line":19,"column":20,"nodeType":"122","messageId":"123","endLine":19,"endColumn":31},{"ruleId":"120","severity":1,"message":"141","line":20,"column":10,"nodeType":"122","messageId":"123","endLine":20,"endColumn":13},{"ruleId":"120","severity":1,"message":"142","line":22,"column":10,"nodeType":"122","messageId":"123","endLine":22,"endColumn":14},{"ruleId":"120","severity":1,"message":"143","line":22,"column":16,"nodeType":"122","messageId":"123","endLine":22,"endColumn":23},{"ruleId":"120","severity":1,"message":"144","line":24,"column":10,"nodeType":"122","messageId":"123","endLine":24,"endColumn":30},{"ruleId":"120","severity":1,"message":"145","line":26,"column":10,"nodeType":"122","messageId":"123","endLine":26,"endColumn":29},{"ruleId":"120","severity":1,"message":"146","line":34,"column":9,"nodeType":"122","messageId":"123","endLine":34,"endColumn":21},{"ruleId":"120","severity":1,"message":"147","line":36,"column":9,"nodeType":"122","messageId":"123","endLine":36,"endColumn":16},{"ruleId":"120","severity":1,"message":"148","line":39,"column":9,"nodeType":"122","messageId":"123","endLine":39,"endColumn":19},{"ruleId":"120","severity":1,"message":"149","line":48,"column":9,"nodeType":"122","messageId":"123","endLine":48,"endColumn":14},{"ruleId":"120","severity":1,"message":"150","line":50,"column":9,"nodeType":"122","messageId":"123","endLine":50,"endColumn":20},{"ruleId":"151","severity":1,"message":"152","line":93,"column":4,"nodeType":"153","endLine":93,"endColumn":15,"suggestions":"154"},{"ruleId":"120","severity":1,"message":"155","line":110,"column":11,"nodeType":"122","messageId":"123","endLine":110,"endColumn":28},{"ruleId":"120","severity":1,"message":"156","line":138,"column":6,"nodeType":"122","messageId":"123","endLine":138,"endColumn":14},{"ruleId":"120","severity":1,"message":"155","line":178,"column":10,"nodeType":"122","messageId":"123","endLine":178,"endColumn":27},{"ruleId":"120","severity":1,"message":"157","line":197,"column":8,"nodeType":"122","messageId":"123","endLine":197,"endColumn":12},{"ruleId":"120","severity":1,"message":"158","line":2,"column":17,"nodeType":"122","messageId":"123","endLine":2,"endColumn":25},{"ruleId":"120","severity":1,"message":"124","line":3,"column":8,"nodeType":"122","messageId":"123","endLine":3,"endColumn":21},{"ruleId":"120","severity":1,"message":"159","line":4,"column":8,"nodeType":"122","messageId":"123","endLine":4,"endColumn":18},{"ruleId":"120","severity":1,"message":"160","line":6,"column":10,"nodeType":"122","messageId":"123","endLine":6,"endColumn":21},{"ruleId":"120","severity":1,"message":"161","line":9,"column":8,"nodeType":"122","messageId":"123","endLine":9,"endColumn":20},{"ruleId":"120","severity":1,"message":"162","line":11,"column":7,"nodeType":"122","messageId":"123","endLine":11,"endColumn":17},{"ruleId":"120","severity":1,"message":"163","line":12,"column":7,"nodeType":"122","messageId":"123","endLine":12,"endColumn":18},{"ruleId":"120","severity":1,"message":"164","line":2,"column":8,"nodeType":"122","messageId":"123","endLine":2,"endColumn":17},{"ruleId":"120","severity":1,"message":"165","line":7,"column":8,"nodeType":"122","messageId":"123","endLine":7,"endColumn":17},{"ruleId":"120","severity":1,"message":"139","line":12,"column":10,"nodeType":"122","messageId":"123","endLine":12,"endColumn":17},{"ruleId":"120","severity":1,"message":"130","line":13,"column":10,"nodeType":"122","messageId":"123","endLine":13,"endColumn":18},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'DropFileInput' is defined but never used.","'MoonLoader' is defined but never used.","'ReactMarkdown' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'textdata' is assigned a value but never used.","'getData' is assigned a value but never used.","'Configuration' is assigned a value but never used.","'OpenAIApi' is assigned a value but never used.","'convertedText' is assigned a value but never used.","'setConvertedText' is assigned a value but never used.","'loading' is assigned a value but never used.","'hasFile' is assigned a value but never used.","'setHasFile' is assigned a value but never used.","'old' is assigned a value but never used.","'file' is assigned a value but never used.","'setFile' is assigned a value but never used.","'elapsedRecordingTime' is assigned a value but never used.","'autoResumeRecording' is assigned a value but never used.","'maxNumOfSecs' is assigned a value but never used.","'api_key' is assigned a value but never used.","'blobToFile' is assigned a value but never used.","'sleep' is assigned a value but never used.","'maxFileSize' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'TIMEOUT_MS' and 'restartAudio'. Either include them or remove the dependency array.","ArrayExpression",["166"],"'webVoiceProcessor' is assigned a value but never used.","'filesize' is assigned a value but never used.","'resp' is assigned a value but never used.","'useState' is defined but never used.","'TextWriter' is defined but never used.","'ScaleLoader' is defined but never used.","'TextWriteOut' is defined but never used.","'fillerText' is assigned a value but never used.","'initialText' is assigned a value but never used.","'PropTypes' is defined but never used.","'uploadImg' is defined but never used.",{"desc":"167","fix":"168"},"Update the dependencies array to be: [TIMEOUT_MS, recording, restartAudio]",{"range":"169","text":"170"},[3026,3037],"[TIMEOUT_MS, recording, restartAudio]"]