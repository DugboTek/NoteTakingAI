[{"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\index.js":"1","C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\reportWebVitals.js":"2","C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\App.js":"3","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\index.js":"4","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\App.js":"5","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\reportWebVitals.js":"6","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextWriter.js":"7","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\UploadFileBox.js":"8","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextAreaBox.js":"9","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\Drop-File-Input\\DropFileInput.jsx":"10","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\config\\imageConfig.js":"11","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\textWriteOut.js":"12","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\audioRecorder.js":"13"},{"size":552,"mtime":1678057236793,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1678057236795,"results":"16","hashOfConfig":"15"},{"size":1037,"mtime":1678057236792,"results":"17","hashOfConfig":"15"},{"size":552,"mtime":1680202362772,"results":"18","hashOfConfig":"19"},{"size":3408,"mtime":1678814181926,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1678057236795,"results":"21","hashOfConfig":"19"},{"size":960,"mtime":1678480761810,"results":"22","hashOfConfig":"19"},{"size":7522,"mtime":1680844228981,"results":"23","hashOfConfig":"19"},{"size":1689,"mtime":1680804980935,"results":"24","hashOfConfig":"19"},{"size":3156,"mtime":1678392724960,"results":"25","hashOfConfig":"19"},{"size":406,"mtime":1678725769561,"results":"26","hashOfConfig":"19"},{"size":465,"mtime":1678392724966,"results":"27","hashOfConfig":"19"},{"size":6599,"mtime":1680847314010,"results":"28","hashOfConfig":"19"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dr4x5g",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"1le90mf",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\index.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\reportWebVitals.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\NoteApp\\SmartScribeAI\\noteai\\src\\App.js",["73"],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\index.js",[],[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\App.js",["74","75","76","77","78","79","80","81","82","83","84"],[],"// create a react component that inputs a textarea message then performs a fetch request to localhost:3001 gets back a response a data.message and displys that message in a box below\r\n\r\nimport React, { useState } from 'react'\r\nimport './App.css'\r\nimport UploadFileBox from './components/UploadFileBox';\r\nimport TextAreaBox from './components/TextAreaBox';\r\nimport DropFileInput from './components/Drop-File-Input/DropFileInput';\r\nimport { MoonLoader } from 'react-spinners';\r\nimport ReactMarkdown from 'react-markdown'\r\n//import ion-icon\r\n\r\nfunction App(props) {\r\n  const [message, setMessage] = useState('')\r\n  const [response, setResponse] = useState('')\r\n\r\n  const [convertedText, setConvertedText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n  /*const handleSubmit = async (e) => {\r\n\r\n    e.preventDefault()\r\n    const response = await fetch('http://localhost:3001', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ message })\r\n    })\r\n    .then(res => res.json())\r\n    .then((data) => setResponse(data.message));\r\n    console.log(\"submitted\");\r\n  };*/\r\n\r\nconst [formData, setFormData] = useState(null);\r\n// write a handleFile function that takes in a file and sets the formData state to a new FormData object with the file appended to it\r\n\r\n\r\n\r\n\r\n\r\n\r\n /*const handleFile = async (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n     \r\n      const data = new FormData();\r\n      data.append(\"file\", file);\r\n      data.append(\"model\", \"whisper-1\");\r\n      data.append(\"language\", \"en\");\r\n      setFormData(data);\r\n\r\n      // check if the size is less than 25MB\r\n      if (file.size > 25 * 1024 * 1024) {\r\n        alert(\"Please upload an audio file less than 25MB\");\r\n        return;\r\n      }\r\n    }\r\n  };*/\r\n\r\nconst[textdata, setTextData] = useState(\"\");\r\n\r\n\r\nconst getData = (textdata) => {\r\n  console.log(textdata);\r\n  setTextData(textdata);\r\n};\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Scribb</h1>\r\n      \r\n      <div className=\"content-box\">\r\n        <div className=\"header-area\">\r\n          <div className =\"boxdefault\">\r\n            <div class = \"header-text-area\">\r\n              <div className=\"box-body\">\r\n\r\n                <div className =\"form-header-title\">\r\n                  <h4 className=\"toplogy\">\r\n                    <span class =\"primaryTextColor\">Need Notes? </span>\r\n                    Scribb\r\n                  </h4>\r\n                  <span className=\"toplolgy-mini\">\r\n                    Get Summerized Lectures With AI\r\n                  </span>\r\n                </div>\r\n                <div className =\"primary-action-btn gradient-animated-box\">\r\n                  <button type=\"button\" className=\"ant-btn\">\r\n                      <span>Upgrade</span>\r\n                  </button>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"left-rail-area flex\">\r\n           \r\n            <TextAreaBox text ={convertedText} loading ={loading}/>\r\n          \r\n        </div>\r\n        <div className=\"right-rail-area flex\">\r\n        <UploadFileBox onConvertedText ={setConvertedText} isLoading ={setLoading}/>\r\n        </div>\r\n      </div>\r\n\r\n      \r\n      { \r\n     \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\reportWebVitals.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextWriter.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\UploadFileBox.js",["85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],[],"import React, { useState, useEffect } from 'react';\r\nimport DropFileInput from './Drop-File-Input/DropFileInput';\r\nimport { audioRecorder } from './audioRecorder.js';\r\nimport recordIcon from '../assets/images/record-black.png';\r\n\r\nconst OpenAI = require('openai');\r\nconst { Configuration, OpenAIApi } = OpenAI;\r\n\r\nconst key = process.env.React_App_OPEN_AI_API_KEY;\r\nconsole.log(key);\r\n\r\nconst UploadFileBox = (props) => {\r\n  const [convertedText, setConvertedText] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n  const [hasFile, setHasFile] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [recording, setRecording] = useState(false);\r\n  const [response, setResponse] = useState('');\r\n  const [old, setOld] = useState([]);\r\n  const [userSubject, setUserSubject] = useState(\"\");\r\n  const [file, setFile] = useState(null);\r\n  const trackLengthInMS = 1000; // Length of audio chunk in miliseconds\r\n  const maxNumOfSecs = 1000; // Number of mili seconds we support per recording (1 second)\r\n\r\n  const api_key = process.env.OPEN_AI_API_KEY;\r\n\r\n  const blobToFile = (theBlob, fileName) => {\r\n    const b = theBlob;\r\n    // Add properties to the blob\r\n    b.lastModifiedDate = new Date();\r\n    b.name = fileName;\r\n    const fileObj = new File([theBlob], fileName, { type: theBlob.type });\r\n    return fileObj;\r\n  }\r\n\r\n  const sleep = time => new Promise(resolve => setTimeout(resolve, time));\r\n\r\n /* const asyncFn = async (recording) => {\r\n    for (let i = 0; i < maxNumOfSecs; i++) {\r\n     // console.log(\"asyncFn loop iteration \", i);\r\n      if (recording) {\r\n        toggleAudioRecording(true);\r\n        await sleep(trackLengthInMS);\r\n        toggleAudioRecording(false);\r\n      }\r\n    }\r\n  }*/\r\n  \r\n\r\n  const toggleAudioRecording = async () => {\r\n\tif (recording) {\r\n\t  // Stop the recording and get the recorded audio Blob as an MP3 file\r\n\t  try {\r\n\t\tlet audioAsblob = await audioRecorder.stop();\r\n\t\tvar file = blobToFile(audioAsblob, \"audio.mp3\");\r\n\t\tconst data = new FormData();\r\n\t\tdata.append('file', file);\r\n\t\tdata.append('model', 'whisper-1');\r\n\t\tsetFormData(data);\r\n\t\tconsole.log(\"formData\" + formData);\r\n\t  } catch (error) {\r\n\t\t// Error handling structure\r\n\t\tswitch (error.name) {\r\n\t\t  case 'InvalidStateError': // Error from the MediaRecorder.stop\r\n\t\t\tconsole.log(\"An InvalidStateError has occured.\");\r\n\t\t\tbreak;\r\n\t\t  default:\r\n\t\t\tconsole.log(\"An error occured while stopping the recorder with the error name \" + error.name);\r\n\t\t};\r\n\t  } finally {\r\n\t\tsetRecording(false);\r\n\t  }\r\n\t} else {\r\n\t  setRecording(true);\r\n\t  // Start recording using the audio recording API\r\n\t  try {\r\n\t\tconsole.log(\"Recording Audio...\");\r\n\t\tawait audioRecorder.start();\r\n\t  } catch (error) {\r\n\t\t// Error handling structure\r\n\t\tswitch (error.name) {\r\n\t\t  case 'AbortError': // Error from navigator.mediaDevices.getUserMedia\r\n\t\t\tconsole.log(\"An AbortError has occured.\");\r\n\t\t\tbreak;\r\n\t\t  case 'NotAllowedError': // Error from navigator.mediaDevices.getUserMedia\r\n\t\t\tconsole.log(\"A NotAllowedError has occured. User might have denied permission.\");\r\n\t\t\tbreak;\r\n\t\t  case 'NotFoundError': // Error from navigator.mediaDevices.getUserMedia\r\n\t\t\tconsole.log(\"A NotFoundError has occured.\");\r\n\t\t\tbreak;\r\n\t\t  case 'NotReadableError': // Error from navigator.mediaDevices.getUserMedia\r\n\t\t\tconsole.log(\"A NotReadableError has occured.\");\r\n\t\t\tbreak;\r\n\t\t  case 'SecurityError': // Error from navigator.mediaDevices.getUserMedia or from the MediaRecorder.start\r\n\t\t\tconsole.log(\"A SecurityError has occured.\");\r\n\t\t\tbreak;\r\n\t\t  case 'TypeError': // Error from navigator.mediaDevices.getUserMedia\r\n\t\t\tconsole.log(\"A TypeError has occured.\");\r\n\t\t\tbreak;\r\n\t\t  case 'InvalidStateError': // Error from the MediaRecorder.start\r\n\t\t\tconsole.log(\"An InvalidStateError has occured.\");\r\n\t\t\tbreak;\r\n\t\t  case 'UnknownError': // Error from the MediaRecorder.start\r\n\t\t\tconsole.log(\"An UnknownError has occured.\");\r\n\t\t\tbreak;\r\n\t\t  default:\r\n\t\t\tconsole.log(\"An error occured while starting the recorder with the error name \" + error.name);\r\n\t\t};\r\n\t\tsetRecording(false);\r\n\t  }\r\n\t}\r\n  };\r\n  \r\n  \r\n  \r\n\t\r\n\t\r\n\tconst handleSubmit = async (inputText) => {\r\n\t\t//gets the subject from the user\r\n\t\tconst resp = await fetch('https://scribb.ai:3001/noteDetails', {\r\n\t\t\tmethod : 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({userSubject}),\r\n\t\t});\r\n\r\n\t\tconst response = await fetch('https://scribb.ai:3001', {\r\n\t\t  method: 'POST',\r\n\t\t  headers: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t  },\r\n\t\t  body: JSON.stringify({inputText}),\r\n\t\t})\r\n\t\tconst data = await response.json();//hi+old\r\n\t\tconst newMessage = data.message;\r\n\t\tsetOld((prevMessages) => [...prevMessages, newMessage]);\r\n\t\tconst allMessages = old.concat(newMessage).join(\"\\n\");\r\n\t\tsetConvertedText(data.message);\r\n\t//\tprops.setConvertedText(data.message);\r\n\t\tprops.onConvertedText(allMessages);\r\n\t\t//setOld(convertedText);\r\n\t\tsetLoading(false);\r\n\t\tprops.isLoading(false);\r\n\t\tconsole.log(data.message);\r\n\t\t/*.then(res => res.json())\r\n\t\t.then((data) => setResponse(data.message))\r\n\t\t.then((data) => setConvertedText(data.message))\r\n\t\t.then((data) => props.onConvertedText(data.message));*/\r\n\t\tconsole.log(\"submitted\");\r\n\r\n\t  };\r\n\r\n\t\r\n\t\r\n\r\n\t  const sendAudio = async () => {\r\n\t\ttry {\r\n\t\t\tprops.isLoading(true);\r\n\t\t\tsetLoading(true);\r\n\t\t\t// Stop recording and get the recorded audio Blob as an MP3 file\r\n\t\t\tlet audioBlob = await audioRecorder.combineAndEncodeAudioBlobs('audio/mp3');\r\n\t\t\tlet file = new File([audioBlob], 'audio.mp3');\r\n\t\t\t// Create a FormData instance to send the file and model information\r\n\t\t\tlet data = new FormData();\r\n\t\t\tdata.append('file', file);\r\n\t\t\tdata.append('model', 'whisper-1');\r\n\t\t\t// Send the audio file to the API for transcription\r\n\t\t\tlet res = await fetch('https://api.openai.com/v1/audio/transcriptions', {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `Bearer ${key}`,\r\n\t\t\t\t},\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: data,\r\n\t\t\t});\r\n\t\t\tlet responseJson = await res.json();\r\n\t\t\tconsole.log(responseJson);\r\n\t\t\t// Set the converted text and user subject in the parent component\r\n\t\t\tsetConvertedText(responseJson.text);\r\n\t\t\tprops.onConvertedText(responseJson.text);\r\n\t\t\tsetUserSubject('Computer Networks');\r\n\t\t\tconsole.log('userSubject in send audio');\r\n\t\t\tconsole.log(userSubject);\r\n\t\t\t// Handle the form submit with the converted text\r\n\t\t\thandleSubmit(responseJson.text);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t} finally {\r\n\t\t\tsetLoading(false);\r\n\t\t\tprops.isLoading(false);\r\n\t\t}\r\n\t};\r\n\t\r\n\r\n\treturn(\r\n\t\t<div className=\"box--upload\">\r\n\t\t\t<div className =\"microphone-box\">\r\n\t\t\t\t<button className={`record-button${recording ? '-recording' : ''}`} onClick={toggleAudioRecording}>\r\n\t\t\t\t<img src={recordIcon} className=\"record-icon\" alt= \"recording button\"/>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<h2 className=\"header\">\r\n\t\t\t\tGet Summerized Lectures With AI\r\n\t\t\t</h2>\r\n\r\n\t\t\t{\r\n\t\t\t<DropFileInput setFormData={setFormData}/>\r\n\t\t\t\t//setFormData={setFormData}\r\n\t\t\t\t//onFileChange={handleFile}\r\n\r\n\r\n\t\t\t}\r\n\t\t\t<form> \r\n\t\t\t\t<div class = \"input-container\">\r\n\t\t\t\t\t<input type=\"text\" onChange ={(e) => setUserSubject(e.target.value)} id=\"subject\" name=\"subject\" placeholder=\"Enter The Class Subject\" required class = \"text-input\"/>\r\n\t\t\t\t\t<label for=\"subject\" class = \"label\">Subject</label>\r\n\t\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<button type = \"button\" className =\"ant-btn padded marginTop\" onClick={sendAudio}>Generate Notes</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default UploadFileBox;","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\TextAreaBox.js",["103","104","105","106","107","108"],[],"//import react\r\nimport React, { useState } from 'react';\r\nimport DropFileInput from './Drop-File-Input/DropFileInput';\r\nimport TextWriter from './TextWriter.js';\r\nimport ReactMarkdown from 'react-markdown'\r\nimport { ScaleLoader } from 'react-spinners';\r\n\r\nimport './text-area-box.css';\r\nimport TextWriteOut from './textWriteOut';\r\n\r\nconst fillerText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec auctor, nisl eget ultricies lacinia, nisl nisl aliquet nisl, eget aliquet nis\";\r\nconst initialText = 'test'\r\n\t//const [textVals, setTextVals] = useState('');\r\nconst TextAreaBox = (props) => {\r\n\r\n\tconst{text} = props;\r\n\t//setTextVals(textVals+text);\r\n\tconsole.log(\"TextArea\")\r\n\t//\r\n\tconsole.log(text);\r\n\treturn(\r\n\t\t<div className=\"flex flex-column flex-1\">\r\n\t\t\t<div className =\"boxdefault results-card\">\r\n\t\t\t\t<div className = \"box-body\">\r\n\t\t\t\t\t<div className=\"text-area\">\r\n\t\t\t\t\t\t<h1 className=\"text-area-title\">Your Notes</h1>\r\n\t\t\t\t\t\t<div className=\"loader\">\r\n\t\t\t\t\t\t</div>\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<div className = \"output-format\" id=\"outputDiv\">\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tprops.loading ?\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<ScaleLoader\r\n\t\t\t\t\t\t\t\tsize={50}\r\n\t\t\t\t\t\t\t\tcolor={\"#cd5f44\"}\r\n\t\t\t\t\t\t\t\tloading={props.loading}\r\n\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<ReactMarkdown \r\n\t\t\t\t\t\t\t\t\tsource={text}\r\n\t\t\t\t\t\t\t\t\tescapeHtml={false} // allows rendering of HTML tags\r\n\t\t\t\t\t\t\t\t\tskipHtml={false}   // allows rendering of HTML tags\r\n\t\t\t\t\t\t\t\t\tlinkTarget=\"_blank\" // opens links in a new tab\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\ttext\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</ReactMarkdown>\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\n//write random filler text\r\n\r\nexport default TextAreaBox;","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\Drop-File-Input\\DropFileInput.jsx",["109","110","111"],[],"import React, { useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './drop-file-input.css';\r\n\r\nimport { ImageConfig } from '../../config/imageConfig';\r\nimport uploadImg from '../../assets/images/upload.png';\r\n\r\nconst DropFileInput = (props) => {\r\n  const wrapperRef = useRef(null);\r\n  const [fileList, setFileList] = useState([]);\r\n  const [hasFile, setHasFile] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  const onDrageEnter = () => wrapperRef.current.classList.add('dragover');\r\n  const onDrageLeave = () => wrapperRef.current.classList.remove('dragover');\r\n  const onDrop = () => wrapperRef.current.classList.remove('dragover');\r\n\r\n  const handleFile = async (e) => {\r\n    if (e.target.files && e.target.files[0]) {\r\n      const file = e.target.files[0];\r\n      const updatedList = [...fileList, file];\r\n      setFileList(updatedList);\r\n     // props.onFileChange(updatedList);\r\n      const data = new FormData();\r\n      data.append('file', file);\r\n      data.append('model', 'whisper-1');\r\n      setFormData(data);\r\n      console.log('File Uploaded- its me im handling the file');\r\n      props.setFormData(data);\r\n      //onFormDataChange(data);\r\n\r\n      setHasFile(true); // set the flag to true\r\n      if (file.size > 25 * 1024 * 1024) {\r\n        alert('Please upload an audio file less than 25MB');\r\n        console.log('Please upload an audio file less than 25MB');\r\n        setHasFile(false); // reset the flag if the file is too big\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const fileRemove = (index) => {\r\n    const updatedList = [...fileList];\r\n    updatedList.splice(index, 1);\r\n    setFileList(updatedList);\r\n    //props.onFileChange(updatedList);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        ref={wrapperRef}\r\n        className='drop-file-input'\r\n        onDragEnter={onDrageEnter}\r\n        onDragLeave={onDrageLeave}\r\n        onDrop={onDrop}\r\n      >\r\n        <div className='drop-file-input__label'>\r\n          <img src={uploadImg} alt='upload' />\r\n          <p>Drag & Drop your file here.</p>\r\n        </div>\r\n        <input type='file' accept='audio/*' onChange={handleFile} />\r\n      </div>\r\n      {fileList.length > 0 ? (\r\n        <div className='drop-file-preview'>\r\n          <p className='drop-file-preview__title'>Uploaded</p>\r\n          {fileList.map((item, index) => (\r\n            <div className='drop-file-preview__item' key={index}>\r\n              <img\r\n                src={ImageConfig[item.type.split('/')[1] || ImageConfig['default']]}\r\n                alt='file'\r\n              />\r\n              <div className='drop-file-preview__item__info'>\r\n                <p>{item.name}</p>\r\n                <p>{Math.round(item.size/1024)} KB</p>\r\n              </div>\r\n              <span\r\n                className='drop-file-preview__item__del'\r\n                onClick={() => fileRemove(index)}\r\n              >\r\n                \r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\n/*DropFileInput.propTypes = {\r\n  onFileChange: PropTypes.func.isRequired,\r\n};*/\r\n\r\nexport default DropFileInput;\r\n","C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\config\\imageConfig.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\textWriteOut.js",[],[],"C:\\Users\\sdugb\\OneDrive\\Desktop\\scribeaiapp\\NoteTakingAI\\noteai\\src\\components\\audioRecorder.js",["112","113"],[],{"ruleId":"114","severity":1,"message":"115","line":12,"column":11,"nodeType":"116","messageId":"117","endLine":12,"endColumn":19},{"ruleId":"114","severity":1,"message":"118","line":7,"column":8,"nodeType":"116","messageId":"117","endLine":7,"endColumn":21},{"ruleId":"114","severity":1,"message":"119","line":8,"column":10,"nodeType":"116","messageId":"117","endLine":8,"endColumn":20},{"ruleId":"114","severity":1,"message":"120","line":9,"column":8,"nodeType":"116","messageId":"117","endLine":9,"endColumn":21},{"ruleId":"114","severity":1,"message":"121","line":13,"column":10,"nodeType":"116","messageId":"117","endLine":13,"endColumn":17},{"ruleId":"114","severity":1,"message":"122","line":13,"column":19,"nodeType":"116","messageId":"117","endLine":13,"endColumn":29},{"ruleId":"114","severity":1,"message":"115","line":14,"column":10,"nodeType":"116","messageId":"117","endLine":14,"endColumn":18},{"ruleId":"114","severity":1,"message":"123","line":14,"column":20,"nodeType":"116","messageId":"117","endLine":14,"endColumn":31},{"ruleId":"114","severity":1,"message":"124","line":36,"column":8,"nodeType":"116","messageId":"117","endLine":36,"endColumn":16},{"ruleId":"114","severity":1,"message":"125","line":36,"column":18,"nodeType":"116","messageId":"117","endLine":36,"endColumn":29},{"ruleId":"114","severity":1,"message":"126","line":62,"column":7,"nodeType":"116","messageId":"117","endLine":62,"endColumn":15},{"ruleId":"114","severity":1,"message":"127","line":65,"column":7,"nodeType":"116","messageId":"117","endLine":65,"endColumn":14},{"ruleId":"114","severity":1,"message":"128","line":1,"column":27,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"129","line":7,"column":9,"nodeType":"116","messageId":"117","endLine":7,"endColumn":22},{"ruleId":"114","severity":1,"message":"130","line":7,"column":24,"nodeType":"116","messageId":"117","endLine":7,"endColumn":33},{"ruleId":"114","severity":1,"message":"131","line":13,"column":10,"nodeType":"116","messageId":"117","endLine":13,"endColumn":23},{"ruleId":"114","severity":1,"message":"132","line":14,"column":10,"nodeType":"116","messageId":"117","endLine":14,"endColumn":17},{"ruleId":"114","severity":1,"message":"133","line":16,"column":10,"nodeType":"116","messageId":"117","endLine":16,"endColumn":17},{"ruleId":"114","severity":1,"message":"134","line":16,"column":19,"nodeType":"116","messageId":"117","endLine":16,"endColumn":29},{"ruleId":"114","severity":1,"message":"121","line":17,"column":10,"nodeType":"116","messageId":"117","endLine":17,"endColumn":17},{"ruleId":"114","severity":1,"message":"122","line":17,"column":19,"nodeType":"116","messageId":"117","endLine":17,"endColumn":29},{"ruleId":"114","severity":1,"message":"115","line":19,"column":10,"nodeType":"116","messageId":"117","endLine":19,"endColumn":18},{"ruleId":"114","severity":1,"message":"123","line":19,"column":20,"nodeType":"116","messageId":"117","endLine":19,"endColumn":31},{"ruleId":"114","severity":1,"message":"135","line":22,"column":10,"nodeType":"116","messageId":"117","endLine":22,"endColumn":14},{"ruleId":"114","severity":1,"message":"136","line":22,"column":16,"nodeType":"116","messageId":"117","endLine":22,"endColumn":23},{"ruleId":"114","severity":1,"message":"137","line":23,"column":9,"nodeType":"116","messageId":"117","endLine":23,"endColumn":24},{"ruleId":"114","severity":1,"message":"138","line":24,"column":9,"nodeType":"116","messageId":"117","endLine":24,"endColumn":21},{"ruleId":"114","severity":1,"message":"139","line":26,"column":9,"nodeType":"116","messageId":"117","endLine":26,"endColumn":16},{"ruleId":"114","severity":1,"message":"140","line":37,"column":9,"nodeType":"116","messageId":"117","endLine":37,"endColumn":14},{"ruleId":"114","severity":1,"message":"141","line":121,"column":9,"nodeType":"116","messageId":"117","endLine":121,"endColumn":13},{"ruleId":"114","severity":1,"message":"142","line":2,"column":17,"nodeType":"116","messageId":"117","endLine":2,"endColumn":25},{"ruleId":"114","severity":1,"message":"118","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":21},{"ruleId":"114","severity":1,"message":"143","line":4,"column":8,"nodeType":"116","messageId":"117","endLine":4,"endColumn":18},{"ruleId":"114","severity":1,"message":"144","line":9,"column":8,"nodeType":"116","messageId":"117","endLine":9,"endColumn":20},{"ruleId":"114","severity":1,"message":"145","line":11,"column":7,"nodeType":"116","messageId":"117","endLine":11,"endColumn":17},{"ruleId":"114","severity":1,"message":"146","line":12,"column":7,"nodeType":"116","messageId":"117","endLine":12,"endColumn":18},{"ruleId":"114","severity":1,"message":"147","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":17},{"ruleId":"114","severity":1,"message":"133","line":12,"column":10,"nodeType":"116","messageId":"117","endLine":12,"endColumn":17},{"ruleId":"114","severity":1,"message":"124","line":13,"column":10,"nodeType":"116","messageId":"117","endLine":13,"endColumn":18},{"ruleId":"114","severity":1,"message":"148","line":1,"column":7,"nodeType":"116","messageId":"117","endLine":1,"endColumn":19},{"ruleId":"114","severity":1,"message":"149","line":4,"column":7,"nodeType":"116","messageId":"117","endLine":4,"endColumn":16},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'DropFileInput' is defined but never used.","'MoonLoader' is defined but never used.","'ReactMarkdown' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'formData' is assigned a value but never used.","'setFormData' is assigned a value but never used.","'textdata' is assigned a value but never used.","'getData' is assigned a value but never used.","'useEffect' is defined but never used.","'Configuration' is assigned a value but never used.","'OpenAIApi' is assigned a value but never used.","'convertedText' is assigned a value but never used.","'loading' is assigned a value but never used.","'hasFile' is assigned a value but never used.","'setHasFile' is assigned a value but never used.","'file' is assigned a value but never used.","'setFile' is assigned a value but never used.","'trackLengthInMS' is assigned a value but never used.","'maxNumOfSecs' is assigned a value but never used.","'api_key' is assigned a value but never used.","'sleep' is assigned a value but never used.","'resp' is assigned a value but never used.","'useState' is defined but never used.","'TextWriter' is defined but never used.","'TextWriteOut' is defined but never used.","'fillerText' is assigned a value but never used.","'initialText' is assigned a value but never used.","'PropTypes' is defined but never used.","'audioEncoder' is assigned a value but never used.","'fileSaver' is assigned a value but never used."]